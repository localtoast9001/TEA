namespace TEAC;
uses System, TEAC, System.Text, System.IO;

constructor X86AsmModuleWriter();
begin
    _log := nil;
    _inner := nil;
    _lastResultInEax := false;
    _lastResultInEdxEax := false;
end;

destructor X86AsmModuleWriter();
begin
    if _inner <> nil then
        delete _inner;
end;

function X86AsmModuleWriter.Open(
    path : ^String; 
    log : ^MessageLog) : boolean;
var
    inner : ^StreamWriter;
begin
    _log := log;
    if _inner <> nil then
        delete _inner;
    inner := new StreamWriter();
    _inner := inner;
    if inner <> nil then
        Open := inner^.Open(path^.Characters())
    else
        Open := false;
end;

procedure X86AsmModuleWriter.Write(module : ^Module);
begin
    _inner^.WriteLine('.model flat,syscall');
    _inner^.WriteLine();
    _inner^.WriteLine('.data');
    _inner^.WriteLine();
    WriteDataSeg(module);
    _inner^.WriteLine();
    _inner^.WriteLine('.code');
    _inner^.WriteLine();
    WriteCodeSeg(module);
    _inner^.WriteLine();
    _inner^.WriteLine('END');
end;

procedure X86AsmModuleWriter.WriteDataSeg(module : ^Module);
var
    entryList : ^LinkedListOfDataEntry = module^.GetData();
    entryEnum : LinkedListEnumeratorOfDataEntry;
    entry : ^DataEntry;
    code : DataCode;
begin
    entryEnum := entryList^.GetEnumerator();
    while entryEnum.MoveNext() do
    begin
        entry := entryEnum.GetCurrent();
        code := entry^.GetCode();
        _inner^.Write(entry^.GetLabel());
        _inner^.Write('    ');
        if code = DataCode.DB then
            _inner^.Write('db ') 
        else if code = DataCode.DW then
            _inner^.Write('dw ')
        else if code = DataCode.DD then
            _inner^.Write('dd ');
        if code = DataCode.DP then
        begin
            _inner^.Write('dd ');
            _inner^.WriteLine(entry^.GetSymbol());
        end
        else
        begin
            _inner^.WriteLine(entry^.GetValue());
        end;
    end;
end;

procedure X86AsmModuleWriter.WriteCodeSeg(module : ^Module);
var
    methodList : ^LinkedListOfMethodImpl;
    methodEnum : LinkedListEnumeratorOfMethodImpl;
begin
    methodList := module^.GetMethods();
    methodEnum := methodList^.GetEnumerator();
    while methodEnum.MoveNext() do
    begin
        WriteMethodImpl(module, methodEnum.GetCurrent());
    end;
end;

procedure X86AsmModuleWriter.WriteMethodImpl(
    module : ^Module; 
    methodImpl : ^MethodImpl);
var
    methodInfo : ^MethodInfo;
    scope : ^Scope;
    mangledName : String;
    paramNames : ^LinkedListOfString;
    paramEnum : LinkedListEnumeratorOfString;
    paramName : String;
    paramType : ^TypeDefinition;
    paramTypeName : String;
    localNames : ^LinkedListOfString;
    localEnum : LinkedListEnumeratorOfString;
    localName : String;
    localType : ^TypeDefinition;
    localTypeName : String;
    index : integer = 0;
    paramOffset : integer = 8;
    localOffset : integer = 0;
    returnType : ^TypeDefinition = nil;
    returnTypeSize : integer = 0;
    statementList : ^LinkedListOfOpStatement;
    statementEnum : LinkedListEnumeratorOfOpStatement;
begin
    _lastResultInEax := false;
    _lastResultInEdxEax := false;
    methodInfo := methodImpl^.GetMethodInfo();
    returnType := methodInfo^.GetReturnType();
    if methodInfo^.GetMangledName(@mangledName) then
    begin
        scope := methodImpl^.GetScope();
        paramNames := scope^.GetParameterNames();
        paramEnum := paramNames^.GetEnumerator();
        while paramEnum.MoveNext() do
        begin
            paramName.assign(paramEnum.GetCurrent());
            paramType := scope^.GetSymbolTypeByIndex(index);
            _inner^.Write('_');
            _inner^.Write(@paramName);
            _inner^.Write('$=');
            _inner^.Write(paramOffset);
            paramTypeName.assign(paramType^.GetFullName());
            _inner^.Write('    ; ');
            _inner^.Write(@paramTypeName);
            _inner^.WriteLine();
            index := index + 1;
            paramOffset := paramOffset + ((paramType^.GetSize() + 3) div 4) * 4;
        end;

        index := -1;
        localNames := scope^.GetLocalVariableNames();
        localEnum := localNames^.GetEnumerator();
        while localEnum.MoveNext() do
        begin
            localName.assign(localEnum.GetCurrent());
            localType := scope^.GetSymbolTypeByIndex(index);
            localOffset := localOffset - ((localType^.GetSize() + 3) div 4) * 4;
            _inner^.Write('_');
            _inner^.Write(@localName);
            _inner^.Write('$=');
            _inner^.Write(localOffset);
            localTypeName.assign(localType^.GetFullName());
            _inner^.Write('    ; ');
            _inner^.Write(@localTypeName);
            _inner^.WriteLine();
            index := index - 1;
        end;

        _inner^.Write(@mangledName);
        _inner^.Write(' PROC SYSCALL');
        if methodInfo^.GetIsProtected() or methodInfo^.GetIsPublic() then
            _inner^.Write(' EXPORT');
        _inner^.WriteLine();
        _inner^.WriteLine('        push ebp');
        _inner^.WriteLine('        mov ebp,esp');
        if localOffset <> 0 then
        begin
            _inner^.Write('        sub esp,');
            _inner^.WriteLine(-localOffset);
        end;
        statementList := methodImpl^.GetStatements();
        statementEnum := statementList^.GetEnumerator();
        while statementEnum.MoveNext() do
        begin
            WriteStatement(module, methodImpl, statementEnum.GetCurrent());
        end;

        if returnType <> nil then
        begin
            if not returnType^.GetIsClass() then
            begin
                returnTypeSize := returnType^.GetSize();
                if returnTypeSize <= 8 then
                begin
                    if returnTypeSize > 2 then
                    begin
                        _inner^.Write('        mov eax,dword ptr _');
                        _inner^.Write(methodInfo^.GetName());
                        _inner^.WriteLine('$[ebp]');
                        if returnTypeSize > 6 then
                        begin
                            _inner^.Write('        mov edx,dword ptr _');
                            _inner^.Write(methodInfo^.GetName());
                            _inner^.WriteLine('$[ebp+4]');
                        end
                        else if returnTypeSize = 6 then
                        begin
                            _inner^.Write('        mov edx,word ptr _');
                            _inner^.Write(methodInfo^.GetName());
                            _inner^.WriteLine('$[ebp+4]');
                        end
                        else if returnTypeSize = 5 then
                        begin
                            _inner^.Write('        mov edx,byte ptr _');
                            _inner^.Write(methodInfo^.GetName());
                            _inner^.WriteLine('$[ebp+4]');
                        end;
                    end
                    else if returnTypeSize = 2 then
                    begin
                        _inner^.Write('        mov eax,word ptr _');
                        _inner^.Write(methodInfo^.GetName());
                        _inner^.WriteLine('$[ebp]');
                    end
                    else
                    begin
                        _inner^.Write('        mov eax,byte ptr _');
                        _inner^.Write(methodInfo^.GetName());
                        _inner^.WriteLine('$[ebp]');
                    end;

                end;
            end;
        end;

        _inner^.WriteLine('        mov esp,ebp');
        _inner^.WriteLine('        pop ebp');
        _inner^.WriteLine('        ret');
        _inner^.Write(@mangledName);
        _inner^.WriteLine(' ENDP');
    end;
end;

procedure X86AsmModuleWriter.WriteStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    opCode : OpCode;
begin
    opCode := statement^.GetOpCode();
    if opCode = OpCode.LoadInt then
    begin
        WriteLoadIntStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.StoreLocal then
    begin
        WriteStoreLocalStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.Neg then
    begin
        WriteNegStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadStaticRef then
    begin
        WriteLoadStaticRefStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.Call then
    begin
        WriteCallStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadLocal then
    begin
        WriteLoadLocalStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadLocalRef then
    begin
        WriteLoadLocalRefStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadArg then
    begin
        WriteLoadArgStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadArgRef then
    begin
        WriteLoadArgRefStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadField then
    begin
        WriteLoadFieldStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadFieldRef then
    begin
        WriteLoadFieldRefStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.StoreField then
    begin
        WriteStoreFieldStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.LoadIndirect then
    begin
        WriteLoadIndirectStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.StoreIndirect then
    begin
        WriteStoreIndirectStatement(module, methodImpl, statement);
    end
    else if opCode = OpCode.Pop then
    begin
        WritePopStatement(module, methodImpl, statement);
    end;
end;

procedure X86AsmModuleWriter.WriteLoadIntStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    size : integer = statement^.GetSize();
begin
    PushResult();
    if size <= 8 then
    begin
        if (size > 4) then
        begin
            _lastResultInEdxEax := true;
            _inner^.WriteLine('        xor edx,edx');
            if statement^.GetIntValue() < 0 then
                _inner^.WriteLine('        not edx');
        end
        else
            _lastResultInEax := true;

        if statement^.GetIntValue() = 0 then
            _inner^.WriteLine('        xor eax,eax')
        else
        begin
            _inner^.Write('        mov eax,');
            _inner^.WriteLine(statement^.GetIntValue());
        end;
    end;    
end;

procedure X86AsmModuleWriter.WriteStoreLocalStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    scope : ^Scope = methodImpl^.GetScope();
    symbol : String;
    size : integer = statement^.GetSize();
begin
    _lastResultInEdxEax := false;
    _lastResultInEax := false;
    symbol.assign(scope^.GetLocalVariableNameByIndex(
        statement^.GetArgOrLocalIndex()));
    if (size <= 8) and (size > 4) then
    begin
        _inner^.Write('        mov dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp],eax');
        _inner^.Write('        mov dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp+4],edx');
    end
    else if (size = 4) or (size = 3) then
    begin
        _inner^.Write('        mov dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp],eax');
    end
    else if size = 2 then
    begin
        _inner^.Write('        mov word ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp],ax');
    end
    else if size = 1 then
    begin
        _inner^.Write('        mov byte ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp],al');
    end;
end;

procedure X86AsmModuleWriter.WriteNegStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    size : integer = statement^.GetSize();
begin
    if size = 8 then
    begin
        _inner^.WriteLine('        not eax');
        _inner^.WriteLine('        not edx');
        _inner^.WriteLine('        add eax,1');
        _inner^.WriteLine('        adc edx,0');
    end
    else if size = 4 then
    begin
        _inner^.WriteLine('        neg eax');
    end
    else if size = 2 then
    begin
        _inner^.WriteLine('        neg ax');
    end
    else if size = 1 then
    begin
        _inner^.WriteLine('        neg al');
    end;
end;

procedure X86AsmModuleWriter.WriteLoadStaticRefStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);                
begin
    PushResult();
    _inner^.Write('        lea eax,[');
    _inner^.Write(statement^.GetTargetSymbol());
    _inner^.WriteLine(']');
    _lastResultInEax := true;
end;

procedure X86AsmModuleWriter.WriteCallStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement); 
begin
    PushResult();
    _inner^.Write('        call ');
    _inner^.WriteLine(statement^.GetTargetSymbol());
end;

procedure X86AsmModuleWriter.WriteLoadLocalStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    scope : ^Scope = methodImpl^.GetScope();
    symbol : String;
    size : integer = statement^.GetSize();
begin
    PushResult();    
    symbol.assign(scope^.GetLocalVariableNameByIndex(
        statement^.GetArgOrLocalIndex()));
    if (size <= 8) and (size > 4) then
    begin
        _inner^.Write('        mov eax,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _inner^.Write('        mov edx,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp+4]');  
        _lastResultInEdxEax := true;
    end
    else if (size = 4) or (size = 3) then
    begin
        _inner^.Write('        mov eax,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end
    else if (size = 2) then
    begin
        _inner^.Write('        mov ax,word ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end
    else if (size = 1) then
    begin
        _inner^.Write('        mov al,byte ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end;
end;

procedure X86AsmModuleWriter.WriteLoadLocalRefStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    scope : ^Scope = methodImpl^.GetScope();
    symbol : String;
begin
    PushResult();    
    symbol.assign(scope^.GetLocalVariableNameByIndex(
        statement^.GetArgOrLocalIndex()));
    _inner^.Write('        lea eax,dword ptr _');
    _inner^.Write(@symbol);
    _inner^.WriteLine('$[ebp]');
    _lastResultInEax := true;
end;

procedure X86AsmModuleWriter.WriteLoadArgStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    scope : ^Scope = methodImpl^.GetScope();
    symbol : String;
    size : integer = statement^.GetSize();
begin
    PushResult();
    symbol.assign(scope^.GetParameterNameByIndex(
        statement^.GetArgOrLocalIndex()));
    if (size <= 8) and (size > 4) then
    begin
        _inner^.Write('        mov eax,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _inner^.Write('        mov edx,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp+4]');  
        _lastResultInEdxEax := true;
    end
    else if (size = 4) or (size = 3) then
    begin
        _inner^.Write('        mov eax,dword ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end
    else if (size = 2) then
    begin
        _inner^.Write('        mov ax,word ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end
    else if (size = 1) then
    begin
        _inner^.Write('        mov al,byte ptr _');
        _inner^.Write(@symbol);
        _inner^.WriteLine('$[ebp]');  
        _lastResultInEax := true;
    end;
end;

procedure X86AsmModuleWriter.WriteLoadArgRefStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    scope : ^Scope = methodImpl^.GetScope();
    symbol : String;
begin
    PushResult();
    symbol.assign(scope^.GetParameterNameByIndex(
        statement^.GetArgOrLocalIndex()));
    _inner^.Write('        lea eax,dword ptr _');
    _inner^.Write(@symbol);
    _inner^.WriteLine('$[ebp]');  
    _lastResultInEax := true;
end;

procedure X86AsmModuleWriter.WriteLoadFieldStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    offset : integer = statement^.GetArgOrLocalIndex();
    size : integer = statement^.GetSize();
begin
    _inner^.WriteLine('        lea ecx,dword ptr [eax]');

    _lastResultInEax := false;
    _lastResultInEdxEax := false;
    if (size > 4) and (size <= 8) then
    begin
        _inner^.Write('        mov eax,dword ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine(']');
        _inner^.Write('        mov edx,dword ptr [ecx+');
        _inner^.Write(offset + 4);
        _inner^.WriteLine(']');
        _lastResultInEdxEax := true;
    end
    else if (size = 4) or (size = 3) then
    begin
        _inner^.Write('        mov eax,dword ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine(']');
        _lastResultInEax := true;
    end
    else if size = 2 then
    begin
        _inner^.Write('        mov ax,word ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine(']');
        _lastResultInEax := true;
    end
    else if size = 1 then
    begin
        _inner^.Write('        mov al,byte ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine(']');
        _lastResultInEax := true;
    end;
end;

procedure X86AsmModuleWriter.WriteLoadFieldRefStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    offset : integer = statement^.GetArgOrLocalIndex();
    size : integer = statement^.GetSize();
begin
    _inner^.Write('        add eax,');
    _inner^.WriteLine(offset);
    _lastResultInEax := true;
    _lastResultInEdxEax := false;
end;

procedure X86AsmModuleWriter.WriteStoreFieldStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    offset : integer = statement^.GetArgOrLocalIndex();
    size : integer = statement^.GetSize();
begin
    _inner^.WriteLine('        lea ecx,dword ptr [eax]');
    _lastResultInEax := false;
    _lastResultInEdxEax := false;
    if (size <= 8) and (size > 4) then
    begin
        _inner^.WriteLine('        pop eax');
        _inner^.WriteLine('        pop edx');
        _inner^.Write('        mov dword ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine('],eax');
        _inner^.Write('        mov dword ptr [ecx+');
        _inner^.Write(offset + 4);
        _inner^.WriteLine('],edx');
    end
    else if (size = 4) or (size = 3) then
    begin
        _inner^.WriteLine('        pop eax');
        _inner^.Write('        mov dword ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine('],eax');
    end
    else if (size = 2) then
    begin
        _inner^.WriteLine('        pop eax');
        _inner^.Write('        mov word ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine('],ax');
    end
    else if (size = 1) then
    begin
        _inner^.WriteLine('        pop eax');
        _inner^.Write('        mov byte ptr [ecx+');
        _inner^.Write(offset);
        _inner^.WriteLine('],al');
    end;
end;

procedure X86AsmModuleWriter.WriteLoadIndirectStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    size : integer = statement^.GetSize();
begin
    _lastResultInEax := false;
    _lastResultInEdxEax := false;
    _inner^.WriteLine('        mov ecx,eax');
    if size >= 3 then
    begin
        _inner^.WriteLine('        mov eax,dword ptr [ecx]');
    end
    else if size = 2 then
    begin
        _inner^.WriteLine('        mov ax,word ptr [ecx]');
    end
    else
    begin
        _inner^.WriteLine('        mov al,byte ptr [ecx]');
    end;

    if (size = 7) or (size = 8) then
    begin
        _inner^.WriteLine('        mov edx,dword ptr [ecx+4]');        
    end
    else if size = 6 then
    begin
        _inner^.WriteLine('        mov dx,word ptr [ecx+4]');        
    end
    else if size = 5 then
    begin
        _inner^.WriteLine('        mov dl,byte ptr [ecx+4]');        
    end;

    if size <= 4 then
        _lastResultInEax := true
    else if size <= 8 then
        _lastResultInEdxEax := true;
end;

procedure X86AsmModuleWriter.WriteStoreIndirectStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
var
    size : integer = statement^.GetSize();
begin
    _lastResultInEax := false;
    _lastResultInEdxEax := false;
    _inner^.WriteLine('        mov ecx,eax');
    _inner^.WriteLine('        pop eax');
    if (size > 4) and (size <= 8) then
        _inner^.WriteLine('        pop edx');
    if size >= 3 then
    begin
        _inner^.WriteLine('        mov dword ptr [ecx],eax');
        if (size = 8) or (size = 7) then
            _inner^.WriteLine('        mov dword ptr [ecx+4],edx')
        else if (size = 6) then
            _inner^.WriteLine('        mov word ptr [ecx+4],dx')
        else if (size = 5) then
            _inner^.WriteLine('        mov byte ptr [ecx+4,dl');
    end
    else if size = 2 then
        _inner^.WriteLine('        mov word ptr [ecx],ax')
    else if size = 1 then
        _inner^.WriteLine('        mov byte ptr [ecx],al');
end;

procedure X86AsmModuleWriter.WritePopStatement(
    module : ^Module;
    methodImpl : ^MethodImpl;
    statement : ^OpStatement);
begin
    _inner^.Write('        add esp,');
    _inner^.WriteLine(statement^.GetSize());
end;

procedure X86AsmModuleWriter.PushResult();
begin
    if _lastResultInEax then
    begin
        _inner^.WriteLine('        push eax');
        _lastResultInEax := false;
    end;

    if _lastResultInEdxEax then
    begin
        _inner^.WriteLine('        push edx');
        _inner^.WriteLine('        push eax');
        _lastResultInEdxEax := false;
    end;
end;
