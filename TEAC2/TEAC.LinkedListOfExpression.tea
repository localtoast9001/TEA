namespace TEAC;
uses System, System.IO, TEAC;

constructor LinkedListNodeOfExpression(value : ^Expression);
begin
    _value := value;
    _next := nil;
    _prev := nil;
end;

destructor LinkedListNodeOfExpression();
begin
    if _value <> nil then
        delete _value;
end;

function LinkedListNodeOfExpression.GetValue() : ^Expression;
begin
    GetValue := _value;
end;

function LinkedListNodeOfExpression.GetNext() : ^LinkedListNodeOfExpression;
begin
    GetNext := _next;
end;

procedure LinkedListNodeOfExpression.SetNext(next : ^LinkedListNodeOfExpression);
begin
    _next := next;
end;

function LinkedListNodeOfExpression.GetPrev() : ^LinkedListNodeOfExpression;
begin
    GetPrev := _prev;
end;

procedure LinkedListNodeOfExpression.SetPrev(prev : ^LinkedListNodeOfExpression);
begin
    _prev := prev;
end;

constructor LinkedListEnumeratorOfExpression(head : ^LinkedListNodeOfExpression);
begin
    _head := head;
    _current := nil;
    _started := false;
end;

function LinkedListEnumeratorOfExpression.MoveNext() : boolean;
begin
    if not _started then
    begin
        _current := _head;
        _started := true;
    end
    else if _current <> nil then
    begin
        _current := _current^.GetNext();
    end;

    MoveNext := _current <> nil;
end;

function LinkedListEnumeratorOfExpression.GetCurrent() : ^Expression;
begin
    if _current <> nil then
        GetCurrent := _current^.GetValue()
    else
        GetCurrent := nil;
end;

constructor LinkedListReverseEnumeratorOfExpression(
    tail : ^LinkedListNodeOfExpression);
begin
    _tail := tail;
    _current := nil;
    _started := false;
end;

function LinkedListReverseEnumeratorOfExpression.MoveNext() : boolean;
begin
    if not _started then
    begin
        _current := _tail;
        _started := true;
    end
    else if _current <> nil then
    begin
        _current := _current^.GetPrev();
    end;

    MoveNext := _current <> nil;
end;

function LinkedListReverseEnumeratorOfExpression.GetCurrent() : ^Expression;
begin
    if _current <> nil then
        GetCurrent := _current^.GetValue()
    else
        GetCurrent := nil;
end;

constructor LinkedListOfExpression();
begin
    _head := nil;
    _tail := nil;
end;

destructor LinkedListOfExpression();
begin
    Clear();
end;

function LinkedListOfExpression.Add(item : ^Expression) : boolean;
var
    node : ^LinkedListNodeOfExpression;
begin
    node := new LinkedListNodeOfExpression(item);
    if node <> nil then
    begin
        Add := true;
        if _tail <> nil then
        begin
            node^.SetPrev(_tail);
            _tail^.SetNext(node);
            _tail := node;
        end
        else
        begin
            _head := node;
            _tail := node;
        end;
    end
    else
        Add := false;
end;

function LinkedListOfExpression.GetEnumerator() : LinkedListEnumeratorOfExpression;
begin
    GetEnumerator := LinkedListEnumeratorOfExpression(_head);
end;

function LinkedListOfExpression.GetReverseEnumerator() : LinkedListReverseEnumeratorOfExpression;
begin
    GetReverseEnumerator := LinkedListReverseEnumeratorOfExpression(_tail);
end;

procedure LinkedListOfExpression.Clear();
var
    node : ^LinkedListNodeOfExpression;
begin
    while _head <> nil do
    begin
        node := _head;
        _head := _head^.GetNext();
        delete node;
    end;
end;

