namespace TEAC;
uses System, TEAC;

constructor MethodDefinition(
    start : ^SharedOfToken;
    name : ^String);
inherited(start);
begin
    _methodNameReference.assign(name);
    _returnType := nil;
    _localVariables := nil;
    _body := nil;
end;

destructor MethodDefinition();
begin
    if _returnType <> nil then
        delete _returnType;
    if _localVariables <> nil then
        delete _localVariables;
    if _body <> nil then
        delete _body;
end;

function MethodDefinition.GetMethodNameReference() : ^String;
begin
    GetMethodNameReference := @_methodNameReference;
end;

function MethodDefinition.GetExternImpl() : ^String;
begin
    GetExternImpl := @_externImpl;
end;

procedure MethodDefinition.SetExternImpl(value : ^String);
begin
    _externImpl.assign(value);
end;

function MethodDefinition.GetParameters() : ^LinkedListOfParameterDeclaration;
begin
    GetParameters := @_parameters;
end;

procedure MethodDefinition.SetReturnType(value : ^TypeReference);
begin
    if _returnType <> nil then
        delete _returnType;
    _returnType := value;
end;

function MethodDefinition.GetReturnType() : ^TypeReference;
begin
    GetReturnType := _returnType;
end;

procedure MethodDefinition.SetLocalVariables(value : ^VarBlock);
begin
    if _localVariables <> nil then
        delete _localVariables;
    _localVariables := value;
end;

function MethodDefinition.GetLocalVariables() : ^VarBlock;
begin
    GetLocalVariables := _localVariables;
end;

procedure MethodDefinition.SetBody(value : ^BlockStatement);
begin
    if _body <> nil then
        delete _body;
    _body := value;
end;

function MethodDefinition.GetBody() : ^BlockStatement;
begin
    GetBody := _body;
end;
