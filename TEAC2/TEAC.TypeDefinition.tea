namespace TEAC;
uses System, TEAC, System.Text;

constructor TypeDefinition();
begin
    _size := 0;
    _arrayElementCount := 0;
    _innerType := nil;
    _baseClass := nil;
    _methodReturnType := nil;
    _methodImplicitArgType := nil;
    _isPointer := false;
    _isArray := false;
    _isClass := false;
    _isFloatingPoint := false;
    _isStaticClass := false;
    _isAbstractClass := false;
    _isInterface := false;
    _isEnum := false;
    _isMethod := false;
end;

destructor TypeDefinition();
begin
end;

function TypeDefinition.GetFullName() : ^String;
begin
    GetFullName := @_fullName;
end;

procedure TypeDefinition.SetFullName(value : ^String);
begin
    _fullName.assign(value);
end;

function TypeDefinition.GetSize() : integer;
begin
    GetSize := _size;
end;

procedure TypeDefinition.SetSize(value : integer);
begin
    _size := value;
end;

function TypeDefinition.GetIsFloatingPoint() : boolean;
begin
    GetIsFloatingPoint := _isFloatingPoint;
end;

procedure TypeDefinition.SetIsFloatingPoint(value : boolean);
begin
    _isFloatingPoint := value;
end;

function TypeDefinition.GetIsPointer() : boolean;
begin
    GetIsPointer := _isPointer;
end;

procedure TypeDefinition.SetIsPointer(value : boolean);
begin
    _isPointer := value;
end;

function TypeDefinition.GetIsPublic() : boolean;
begin
    GetIsPublic := _isPublic;
end;

procedure TypeDefinition.SetIsPublic(value : boolean);
begin
    _isPublic := value;
end;

function TypeDefinition.GetIsArray() : boolean;
begin
    GetIsArray := _isArray;
end;

procedure TypeDefinition.SetIsArray(value : boolean);
begin
    _isArray := value;
end;

function TypeDefinition.GetIsClass() : boolean;
begin
    GetIsClass := _isClass;
end;

procedure TypeDefinition.SetIsClass(value : boolean);
begin
    _isClass := value;
end;

function TypeDefinition.GetIsMethod() : boolean;
begin
    GetIsMethod := _isMethod;
end;

procedure TypeDefinition.SetIsMethod(value : boolean);
begin
    _isMethod := value;
end;

function TypeDefinition.GetIsStaticClass() : boolean;
begin
    GetIsStaticClass := _isStaticClass;
end;

procedure TypeDefinition.SetIsStaticClass(value : boolean);
begin
    _isStaticClass := value;
end;

function TypeDefinition.GetIsAbstractClass() : boolean;
begin
    GetIsAbstractClass := _isAbstractClass;
end;

procedure TypeDefinition.SetIsAbstractClass(value : boolean);
begin
    _isAbstractClass := value;
end;

function TypeDefinition.GetIsInterface() : boolean;
begin
    GetIsInterface := _isInterface;
end;

procedure TypeDefinition.SetIsInterface(value : boolean);
begin
    _isInterface := value;
end;

function TypeDefinition.GetIsEnum() : boolean;
begin
    GetIsEnum := _isEnum;
end;

procedure TypeDefinition.SetIsEnum(value : boolean);
begin
    _isEnum := value;
end;

function TypeDefinition.GetSpecialMangledName() : ^String;
begin
    GetSpecialMangledName := @_specialMangledName;
end;

procedure TypeDefinition.SetSpecialMangledName(value : ^String);
begin
    _specialMangledName.assign(value);
end;

function TypeDefinition.GetEnumValues() : ^DictionaryOfStringToInteger;
begin
    GetEnumValues := @_enumValues;
end;

procedure TypeDefinition.SetBaseType(value : ^TypeDefinition);
begin
    _baseClass := value;
end;

function TypeDefinition.GetBaseType() : ^TypeDefinition;
begin
    GetBaseType := _baseClass;
end;

procedure TypeDefinition.SetInnerType(value : ^TypeDefinition);
begin
    _innerType := value;
end;

function TypeDefinition.GetInnerType() : ^TypeDefinition;
begin
    GetInnerType := _innerType;
end;

function TypeDefinition.GetArrayElementCount() : integer;
begin
    GetArrayElementCount := _arrayElementCount;
end;

procedure TypeDefinition.SetArrayElementCount(value : integer);
begin
    _arrayElementCount := value;
end;

function TypeDefinition.GetMethods() : ^LinkedListOfMethodInfo;
begin
    GetMethods := @_methods;
end;

function TypeDefinition.AddMethod(item : ^MethodInfo) : boolean;
begin
    AddMethod := _methods.Add(item);
end;

function TypeDefinition.GetMangledName(value : ^String) : boolean;
var
    sb : SimpleStringBuilder;
    innerName : String;
    success : boolean;
begin
    if _specialMangledName.Length() > 0 then
    begin
        value^.assign(@_specialMangledName);
        GetMangledName := true;
    end
    else
    begin
        if _isClass or _isStaticClass or _isAbstractClass or _isInterface then
        begin
            success := GetMangledQualifiedName(@innerName);
            if success then
                success := sb.TryAppend('V');
            if success then
                success := sb.TryAppend(@innerName);
            if success then
                success := sb.ToString(value);
            GetMangledName := success;
        end
        else if _isPointer then
        begin
            success := _innerType^.GetMangledName(@innerName);
            if success then
                success := sb.TryAppend('PA');
            if success then
                success := sb.TryAppend(@innerName);
            if success then
                success := sb.ToString(value);
            GetMangledName := success;
        end
        else if _isArray then
        begin
            success := _innerType^.GetMangledName(@innerName);
            if success then
                success := sb.TryAppend('QA');
            if success then
                success := sb.TryAppend(@innerName);
            if success then
                success := sb.ToString(value);
            GetMangledName := success;
        end;
    end;
end;

function TypeDefinition.GetMangledQualifiedName(value : ^String) : boolean;
var
    sb : SimpleStringBuilder;
    index : integer;
    remainingName, temp : String;
    namePart : String;
    dot : array of character = '.';
    success : boolean = true; 
begin
    remainingName.assign(@_fullName);
    index := remainingName.LastIndexOf(dot[0]);
    while success and (index >= 0) do
    begin
        temp.assign(@remainingName);
        success := remainingName.Substring(index + 1, @namePart);
        if success then
            success := sb.TryAppend(@namePart);
        if success then
            success := sb.TryAppend('@');
        if success then
            success := temp.Substring(0, index, @remainingName);
        if success then
            index := remainingName.LastIndexOf(dot[0]);
    end;
    if success then
    begin
        success := sb.TryAppend(@remainingName);
        if success then
            success := sb.TryAppend('@');
        if success then
            success := sb.ToString(value);
    end;

    GetMangledQualifiedName := success;
end;
