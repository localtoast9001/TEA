namespace TEAC;
uses TEAC, System, System.Text;

constructor MethodInfo(owner : ^TypeDefinition);
begin
    _type := owner;
    _returnType := nil;
    _vTableIndex := 0;
    _isStatic := false;
    _isVirtual := false;
    _isAbstract := false;
    _isPublic := false;
    _isProtected := false;
end;

function MethodInfo.GetName() : ^String;
begin
    GetName := @_name;
end;

procedure MethodInfo.SetName(value : ^String);
begin
    _name.assign(value);
end;

function MethodInfo.GetParameters() : ^LinkedListOfParameterInfo; 
begin
    GetParameters := @_parameters;
end;

function MethodInfo.AddParameter(item : ^ParameterInfo) : boolean;
begin
    AddParameter := _parameters.Add(item);
end;

destructor MethodInfo();
begin
end;

function MethodInfo.GetIsStatic() : boolean;
begin
    GetIsStatic := _isStatic;
end;

procedure MethodInfo.SetIsStatic(value : boolean);
begin
    _isStatic := value;
end;

function MethodInfo.GetIsVirtual() : boolean;
begin
    GetIsVirtual := _isVirtual;
end;

procedure MethodInfo.SetIsVirtual(value : boolean);
begin
    _isVirtual := value;
end;

function MethodInfo.GetIsAbstract() : boolean;
begin
    GetIsAbstract := _isAbstract;
end;

procedure MethodInfo.SetIsAbstract(value : boolean);
begin
    _isAbstract := value;
end;

function MethodInfo.GetIsPublic() : boolean;
begin
    GetIsPublic := _isPublic;
end;

procedure MethodInfo.SetIsPublic(value : boolean);
begin
    _isPublic := value;
end;

function MethodInfo.GetIsProtected() : boolean;
begin
    GetIsProtected := _isProtected;
end;

procedure MethodInfo.SetIsProtected(value : boolean);
begin
    _isProtected := value;
end;

function MethodInfo.GetReturnType() : ^TypeDefinition;
begin
    GetReturnType := _returnType;
end;

procedure MethodInfo.SetReturnType(value : ^TypeDefinition);
begin
    _returnType := value;
end;

function MethodInfo.GetMangledName(value : ^String) : boolean;
var
    sb : SimpleStringBuilder;
    currentParam : ^ParameterInfo;
    currentParamType : ^TypeDefinition;
    paramEnum : LinkedListEnumeratorOfParameterInfo;
    typeMangledName : String;
    success, noArgs : boolean;
begin
    {Start / Qualified Name}
    success := sb.TryAppend('?');
    if success then
        success := sb.TryAppend(@_name);
    if success then
        success := sb.TryAppend('@');
    if success then
        success := _type^.GetMangledQualifiedName(@typeMangledName);
    if success then
        success := sb.TryAppend(@typeMangledName);
    if success then
        success := sb.TryAppend('@');

    {Class Protection level}
    if success then
    begin
        if _isPublic then
        begin
            if _isStatic then
                success := sb.TryAppend('S')
            else if _isVirtual or _isAbstract then
                success := sb.TryAppend('UA')
            else
                success := sb.TryAppend('QA');
        end 
        else if _isProtected then
        begin
            if _isStatic then
                success := sb.TryAppend('K')
            else if _isVirtual or _isAbstract then
                success := sb.TryAppend('MA')
            else
                success := sb.TryAppend('IA');
        end
        else
        begin
            if _isStatic then
                success := sb.TryAppend('C')
            else
                success := sb.TryAppend('AA');
        end;
    end;

    {Calling convention}
    if success then
        success := sb.TryAppend('A'); {TODO: compute exported}

    {Return Type}
    if success then
    begin
        if _returnType <> nil then
        begin
            success := _returnType^.GetMangledName(@typeMangledName);
            if success then
                success := sb.TryAppend(@typeMangledName);
        end 
        else
            success := sb.TryAppend('@');
    end;

    {Arguments}
    noArgs := true;
    paramEnum := _parameters.GetEnumerator();
    while success and paramEnum.MoveNext() do
    begin
        noArgs := false;
        currentParam := paramEnum.GetCurrent();
        currentParamType := currentParam^.GetType();
        success := currentParamType^.GetMangledName(@typeMangledName);
        if success then
            success := sb.TryAppend(@typeMangledName);
    end;
    
    if success and noArgs then
        success := sb.TryAppend('X')
    else 
        success := sb.TryAppend('@');

    {Exceptions}
    if success then
        success := sb.TryAppend('Z'); {NOTE: never does throw()}

    {Produce result}
    if success then
        success := sb.ToString(value);
    GetMangledName := success;
end;
