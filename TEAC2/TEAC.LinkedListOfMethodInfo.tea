namespace TEAC;
uses System, System.IO, TEAC;

constructor LinkedListNodeOfMethodInfo(value : ^MethodInfo);
begin
    _value := value;
    _next := nil;
end;

destructor LinkedListNodeOfMethodInfo();
begin
    if _value <> nil then
        delete _value;
end;

function LinkedListNodeOfMethodInfo.GetValue() : ^MethodInfo;
begin
    GetValue := _value;
end;

function LinkedListNodeOfMethodInfo.GetNext() : ^LinkedListNodeOfMethodInfo;
begin
    GetNext := _next;
end;

procedure LinkedListNodeOfMethodInfo.SetNext(next : ^LinkedListNodeOfMethodInfo);
begin
    _next := next;
end;

constructor LinkedListEnumeratorOfMethodInfo(head : ^LinkedListNodeOfMethodInfo);
begin
    _head := head;
    _current := nil;
    _started := false;
end;

function LinkedListEnumeratorOfMethodInfo.MoveNext() : boolean;
begin
    if not _started then
    begin
        _current := _head;
        _started := true;
    end
    else 
    begin
        if _current <> nil then
            _current := _current^.GetNext();
    end;

    MoveNext := _current <> nil;
end;

function LinkedListEnumeratorOfMethodInfo.GetCurrent() : ^MethodInfo;
begin
    GetCurrent := nil;
    if _current <> nil then
        GetCurrent := _current^.GetValue();
end;

constructor LinkedListOfMethodInfo();
begin
    _head := nil;
    _tail := nil;
end;

destructor LinkedListOfMethodInfo();
begin
    Clear();
end;

function LinkedListOfMethodInfo.Add(item : ^MethodInfo) : boolean;
var
    node : ^LinkedListNodeOfMethodInfo;
begin
    node := new LinkedListNodeOfMethodInfo(item);
    if node <> nil then
    begin
        Add := true;
        if _tail <> nil then
        begin
            _tail^.SetNext(node);
            _tail := node;
        end
        else
        begin
            _head := node;
            _tail := node;
        end;
    end
    else
        Add := false;
end;

function LinkedListOfMethodInfo.GetEnumerator() : LinkedListEnumeratorOfMethodInfo;
begin
    GetEnumerator := LinkedListEnumeratorOfMethodInfo(_head);
end;

procedure LinkedListOfMethodInfo.Clear();
var
    node : ^LinkedListNodeOfMethodInfo;
begin
    while _head <> nil do
    begin
        node := _head;
        _head := _head^.GetNext();
        delete node;
    end;
end;

