namespace TEAC;
uses System, System.IO;

type
    Severity = (Error, Warning, Info);
    Message = class
        public
            constructor(
                path : ^String;
                line, column : integer;
                severity : Severity;
                message : ^String);
            destructor();
            static function Create(
                path : ^String;
                line, column : integer;
                severity : Severity;
                message : array of character) : ^Message;
            function GetSeverity() : Severity;
            function ToString(value : ^String) : boolean;
        var
            _path : String;
            _line, _column : integer;
            _severity : Severity;
            _message : String;
    end;
    LinkedListNodeOfMessage = class
        public
            constructor(value : ^Message);
            destructor();
            function GetValue() : ^Message;
            procedure SetNext(next : ^LinkedListNodeOfMessage);
            function GetNext() : ^LinkedListNodeOfMessage;
        var
            _value : ^Message;
            _next : ^LinkedListNodeOfMessage;
    end;
    MessageLogEnumerator = class
        public
            constructor(head : ^LinkedListNodeOfMessage);
            function MoveNext() : boolean;
            function GetCurrent() : ^Message;
        var
            _head, _current : ^LinkedListNodeOfMessage;
            _started : boolean;
    end;
    MessageLog = class
        public
            constructor();
            destructor();
            function HasErrors() : boolean;
            function Write(message : ^Message) : boolean;
            procedure WriteUnexpectedEndOfFile(
                path : ^String;
                line, column : integer);
            function GetEnumerator() : MessageLogEnumerator;
        var
            _head, _tail : ^LinkedListNodeOfMessage;
            _hasErrors : boolean;
    end;
    LinkedListNodeOfString = class
        public
            constructor(value : ^String);
            destructor();
            function GetValue() : ^String;
            function GetNext() : ^LinkedListNodeOfString;
            procedure SetNext(next : ^LinkedListNodeOfString);
        var
            _value : String;
            _next : ^LinkedListNodeOfString;
    end;
    LinkedListEnumeratorOfString = class
        public
            constructor(head : ^LinkedListNodeOfString);
            function MoveNext() : boolean;
            function GetCurrent() : ^String;
        var
            _head, _current : ^LinkedListNodeOfString;
            _started : boolean;
    end;
    LinkedListOfString = class
        public
            constructor();
            destructor();
            function Add(item : ^String) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfString;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfString;
    end;
    DictionaryOfStringToIntegerNode = class
        public
            constructor(key : ^String; value : integer);
            destructor();
            function Key() : ^String;
            function Value() : integer;
            procedure SetValue(value : integer);
            function Next() : ^DictionaryOfStringToIntegerNode;
            procedure SetNext(value : ^DictionaryOfStringToIntegerNode);
        var
            _key : String;
            _value : integer;
            _next : ^DictionaryOfStringToIntegerNode;
    end;
    DictionaryOfStringToInteger = class
        public
            constructor();
            destructor();
            function TryGetValue(key : ^String; valueRef : ^integer) : boolean;
            function TryAssign(key : ^String; value : integer) : boolean;
        private 
            static function GetHashCode(value : ^String) : integer;
        var
            _table : array [256] of ^DictionaryOfStringToIntegerNode;
    end;
    Arguments = class
        public
            constructor();
            destructor();
            function TryParse(
                argc : integer;
                argv : array of array of character) : boolean;
            function GetInputFile() : ^String;
            function GetOutputListing() : ^String;
            function GetIncludes() : LinkedListEnumeratorOfString;
        var
            _inputFile, _outputListing : String;
            _includes : LinkedListOfString;
    end;
    TokenType = (
        Identifier, 
        Keyword, 
        LiteralString, 
        LiteralInteger,
        LiteralDouble);
    Keyword = (
        Dot,
        LeftParen,
        RightParen,
        LeftBracket,
        RightBracket,
        SemiColon,
        Colon,
        Equals,
        Assign,
        GreaterThan,
        GreaterThanOrEquals,
        LessThan,
        LessThanOrEquals,
        NotEqual,
        Comma,
        Address,
        Pointer,
        Star,
        Plus,
        Minus,
        Slash,
        Abstract,
        And,
        Array,
        Begin,
        Case,
        Class,
        Const,
        Constructor,
        Delete,
        Destructor,
        Div,
        Do,
        DownTo,
        Else,
        End,
        Extern,
        False,
        For,
        Function,
        If,
        In,
        Inherited,
        Interface,
        Mod,
        Namespace,
        New,
        Nil,
        Not,
        Of,
        Or,
        Packed,
        Private,
        Procedure,
        Program,
        Protected,
        Public,
        Record,	
        Repeat,
        Set,
        Static,
        Then,
        To,
        True,
        Type,
        Until,
        Uses,
        Var,
        Virtual,
        While);
    RelationalOperator = (
        LessThan,
        LessThanOrEquals,
        Equals,
        GreaterThan,
        GreaterThanOrEquals,
        NotEqual);
    SimpleOperator = (
        Add,
        Subtract,
        Or);
    TermOperator = (
        Multiply,
        Divide,
        IntegerDivide,
        And,
        Mod);
    Token = class
        public
            destructor();
            function GetType() : TokenType;
            function GetStringValue() : ^String;
            function GetIntValue() : integer;
            function GetDoubleValue() : double;
            function GetKeywordValue() : Keyword;
            function GetPath() : ^String;
            function GetLine() : integer;
            function GetColumn() : integer;

            static function Is(
                tok : ^Token;
                keyword : Keyword) : boolean;
            static function IsIdentifier(
                tok : ^Token) : boolean;
            static function IsLiteral(
                tok : ^Token) : boolean;

            static function CreateIdentifier(
                identifier : ^String;
                path : ^String;
                line, column : integer) : ^Token;
            static function CreateKeyword(
                keyword : Keyword;
                path : ^String;
                line, column : integer) : ^Token;
            static function CreateLiteral(
                value : ^String;
                path : ^String;
                line, column : integer) : ^Token;
            static function CreateLiteral(
                value : integer;
                path : ^String;
                line, column : integer) : ^Token;
            static function CreateLiteral(
                value : double;
                path : ^String;
                line, column : integer) : ^Token;
        private
            constructor(
                tokenType : TokenType; 
                keywordValue : Keyword;
                stringValue : ^String;
                intValue : integer;
                doubleValue : double;
                path : ^String;
                line, column : integer);
        var
            _type : TokenType;
            _keywordValue : Keyword;
            _stringValue : String;
            _intValue : integer;
            _doubleValue : double;
            _path : String;
            _line, _column : integer;
    end;
    SharedBodyOfToken = class
        public
            function Value() : ^Token;
            function AddRef() : integer;
            function Release() : integer;
            static function Create(value : ^Token) : ^SharedBodyOfToken;
        protected
            constructor(value : ^Token);
            destructor();            
        var
            _value : ^Token;
            _refCount : integer;
    end;
    SharedOfToken = class
        public
            constructor();
            constructor(copy : ^SharedOfToken);
            destructor();
            procedure assign(copy : ^SharedOfToken);
            procedure Clear();
            function TryAssign(value : ^Token) : boolean;
            function Value() : ^Token;
            function Is(keyword : Keyword) : boolean;
            function IsIdentifier() : boolean;
            function IsRelationalOperator(
                operatorRef : ^RelationalOperator) : boolean;
            function IsSimpleOperator(
                operatorRef : ^SimpleOperator) : boolean;
            function IsTermOperator(
                operatorRef : ^TermOperator) : boolean;
        var
            _value : ^SharedBodyOfToken;
    end;
    TokenReader = class
        public
            constructor();
            destructor();
            function Open(path : ^String; log : ^MessageLog) : boolean;
            function GetPath() : ^String;
            function GetLine() : integer;
            function GetColumn() : integer;
            procedure Close();
            function Read(token : ^SharedOfToken) : boolean;
            function Peek(token : ^SharedOfToken) : boolean;
        private
            function InnerRead() : ^Token;
            function EatCommentsAndWhiteSpace() : ^Token;
            function ReadNumber() : ^Token;
            function ReadIdentifierOrKeyword() : ^Token;
            function ReadStringLiteral() : ^Token;
            function ReadChar() : integer;
            function ReadDecimalAfterDot() : ^Token;
            function InnerReadDecimalAfterDot() : double;
            procedure EatWhiteSpace();
            procedure WriteUnsupportedCharacterErrorMessage(ch : character);
            function MatchKeyword(
                element : ^String;
                keyword : ^Keyword) : boolean;
        var
            _path : String;
            _line, _column : integer;
            _log : ^MessageLog;
            _next : SharedOfToken;
            _inner : ^TextReader;
    end;
    ParseNode = class
        public
            virtual destructor();
            function GetStart() : ^Token;
        protected
            constructor(start : ^SharedOfToken);
        var 
            _start : SharedOfToken;
    end;
    Expression = class(ParseNode)
        public
            virtual destructor();
            abstract procedure Accept(visitor : ^IExpressionVisitor);
            function GetResultType() : ^TypeDefinition;
            procedure SetResultType(value : ^TypeDefinition);
        protected
            constructor(start : ^SharedOfToken);
        var
            _resultType : ^TypeDefinition;
    end;
    LinkedListNodeOfExpression = class
        public
            constructor(value : ^Expression);
            destructor();
            function GetValue() : ^Expression;
            function GetNext() : ^LinkedListNodeOfExpression;
            procedure SetNext(next : ^LinkedListNodeOfExpression);
        var
            _value : ^Expression;
            _next : ^LinkedListNodeOfExpression;
    end;
    LinkedListEnumeratorOfExpression = class
        public
            constructor(head : ^LinkedListNodeOfExpression);
        var
            _head, _current : ^LinkedListNodeOfExpression;
            _started : boolean;
    end;
    LinkedListOfExpression = class
        public
            constructor();
            destructor();
            function Add(item : ^Expression) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfExpression;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfExpression;
    end;
    ReferenceExpression = class(Expression)
        public
            virtual destructor();
        protected
            constructor(start : ^SharedOfToken);
    end;
    NamedReferenceExpression = class(ReferenceExpression)
        public
            constructor(
                start : ^SharedOfToken; 
                name : ^String);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetName() : ^String;
        var
            _name : String;
    end;
    InheritedReferenceExpression = class(ReferenceExpression)
        public
            constructor(start : ^SharedOfToken);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
    end;
    MemberReferenceExpression = class(ReferenceExpression)
        public
            constructor(
                start : ^SharedOfToken; 
                inner : ^ReferenceExpression;
                name : ^String);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _name : String;
            _inner : ^ReferenceExpression;
    end;
    CallReferenceExpression = class(ReferenceExpression)
        public
            constructor(
                start : ^SharedOfToken;
                inner : ^ReferenceExpression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function AddArgument(item : ^Expression) : boolean;
        var
            _inner : ^ReferenceExpression;
            _args : LinkedListOfExpression;
    end;
    ArrayIndexReferenceExpression = class(ReferenceExpression)
        public
            constructor(
                start : ^SharedOfToken; 
                inner : ^ReferenceExpression;
                index : ^Expression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _inner : ^ReferenceExpression;
            _index : ^Expression;
    end;
    DereferenceExpression = class(ReferenceExpression)
        public
            constructor(
                start : ^SharedOfToken; 
                inner : ^ReferenceExpression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _inner : ^ReferenceExpression;
    end;
    AddressExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken; 
                inner : ^ReferenceExpression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetInner() : ^ReferenceExpression;
        var
            _inner : ^ReferenceExpression;
    end;
    LiteralNilExpression = class(Expression)
        public
            constructor(start : ^SharedOfToken);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
    end;
    LiteralBooleanExpression = class(Expression)
        public 
            constructor(
                start : ^SharedOfToken;
                value : boolean);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _value : boolean;
    end;
    LiteralStringExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken;
                value : ^String);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetValue() : ^String;
        var
            _value : String;
    end;
    LiteralIntExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken;
                value : integer);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetValue() : integer;
        var
            _value : integer;
    end;
    LiteralDoubleExpression = class(Expression)
        public 
            constructor(
                start : ^SharedOfToken;
                value : double);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _value : double;
    end;
    NegativeExpression = class(Expression)
        public
            constructor(start : ^SharedOfToken; inner : ^Expression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetInner() : ^Expression;
        var
            _inner : ^Expression;
    end;
    NewExpression = class(Expression)
    end;
    NotExpression = class(Expression)
        public
            constructor(start : ^SharedOfToken; inner : ^Expression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
            function GetInner() : ^Expression;
        var
            _inner : ^Expression;
    end;
    RelationalExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken; 
                left, right : ^Expression;
                operator : RelationalOperator);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _left, _right : ^Expression;
            _operator : RelationalOperator;
    end;
    SimpleExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken;
                left, right : ^Expression;
                operator : SimpleOperator);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _left, _right : ^Expression;
            _operator : SimpleOperator;
    end;
    TermExpression = class(Expression)
        public
            constructor(
                start : ^SharedOfToken;
                left, right : ^Expression;
                operator : TermOperator);
            virtual destructor();
            virtual procedure Accept(visitor : ^IExpressionVisitor);
        var
            _left, _right : ^Expression;
            _operator : TermOperator;
    end;
    IExpressionVisitor = interface
        procedure Visit(expr : ^TermExpression);
        procedure Visit(expr : ^SimpleExpression);
        procedure Visit(expr : ^RelationalExpression);
        procedure Visit(expr : ^NotExpression);
        procedure Visit(expr : ^NewExpression);
        procedure Visit(expr : ^NegativeExpression);
        procedure Visit(expr : ^LiteralDoubleExpression);
        procedure Visit(expr : ^LiteralIntExpression);
        procedure Visit(expr : ^LiteralStringExpression);
        procedure Visit(expr : ^LiteralBooleanExpression);
        procedure Visit(expr : ^LiteralNilExpression);
        procedure Visit(expr : ^AddressExpression);
        procedure Visit(expr : ^DereferenceExpression);
        procedure Visit(expr : ^ArrayIndexReferenceExpression);
        procedure Visit(expr : ^CallReferenceExpression);
        procedure Visit(expr : ^MemberReferenceExpression);
        procedure Visit(expr : ^InheritedReferenceExpression);
        procedure Visit(expr : ^NamedReferenceExpression);
    end;
    Statement = class(ParseNode)
        public
            virtual destructor();
            abstract procedure Accept(visitor : ^IStatementVisitor);
        protected
            constructor(start : ^SharedOfToken);
    end;
    LinkedListNodeOfStatement = class
        public
            constructor(value : ^Statement);
            destructor();
            function GetValue() : ^Statement;
            function GetNext() : ^LinkedListNodeOfStatement;
            procedure SetNext(next : ^LinkedListNodeOfStatement);
        var
            _value : ^Statement;
            _next : ^LinkedListNodeOfStatement;
    end;
    LinkedListEnumeratorOfStatement = class
        public
            constructor(head : ^LinkedListNodeOfStatement);
            function MoveNext() : boolean;
            function GetCurrent() : ^Statement;
        var
            _head, _current : ^LinkedListNodeOfStatement;
            _started : boolean;
    end;
    LinkedListOfStatement = class
        public
            constructor();
            destructor();
            function Add(item : ^Statement) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfStatement;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfStatement;
    end;
    BlockStatement = class(Statement)
        public
            constructor(start : ^SharedOfToken);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetStatements() : ^LinkedListOfStatement;
            function AddStatement(item : ^Statement) : boolean;
        var
            _statements : LinkedListOfStatement;
    end;
    AssignmentStatement = class(Statement)
        public
            constructor(
                start : ^SharedOfToken;
                storage : ^ReferenceExpression;
                value : ^Expression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetStorage() : ^ReferenceExpression;
            function GetValue() : ^Expression;
        var
            _storage : ^ReferenceExpression;
            _value : ^Expression; 
    end;
    CallStatement = class(Statement)
        public 
            constructor(
                start : ^SharedOfToken; 
                callExpression : ^ReferenceExpression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetCallExpression() : ^ReferenceExpression;
        var
            _expression : ^ReferenceExpression;
    end;
    DeleteStatement = class(Statement)
        public
            constructor(
                start : ^SharedOfToken;
                value : ^Expression);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetValue() : ^Expression; 
        var
            _value : ^Expression;
    end;
    IfStatement = class(Statement)
        public
            constructor(
                start : ^SharedOfToken;
                condition : ^Expression;
                trueStatement : ^Statement;
                falseStatement : ^Statement);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetCondition() : ^Expression;
            function GetTrueStatement() : ^Statement;
            function GetFalseStatement() : ^Statement;
        var
            _condition : ^Expression;
            _trueStatement : ^Statement;
            _falseStatement : ^Statement;
    end;
    WhileStatement = class(ParseNode)
        public
            constructor(
                start : ^SharedOfToken;
                condition : ^Expression;
                bodyStatement : ^Statement);
            virtual destructor();
            virtual procedure Accept(visitor : ^IStatementVisitor);
            function GetCondition() : ^Expression;
            function GetBodyStatement() : ^Statement;
        var
            _condition : ^Expression;
            _bodyStatement : ^Statement;
    end;
    IStatementVisitor = interface
        procedure Visit(statement : ^WhileStatement);
        procedure Visit(statement : ^IfStatement);
        procedure Visit(statement : ^DeleteStatement);
        procedure Visit(statement : ^CallStatement);
        procedure Visit(statement : ^AssignmentStatement);
        procedure Visit(statement : ^BlockStatement);
    end;
    TypeDeclaration = class(ParseNode)
        public 
            virtual destructor();
            function GetName() : ^String;
            function GetIsPublic() : boolean;
            procedure SetIsPublic(value : boolean);
            abstract procedure Accept(visitor : ^ITypeDeclarationVisitor);
        protected
            constructor(start : ^SharedOfToken; name : ^String);
        var
            _name : String;
            _isPublic : boolean;
    end;
    EnumDeclaration = class(TypeDeclaration)
        public
            constructor(start : ^SharedOfToken; name : ^String);
            virtual destructor();
            function AddValue(value : ^String) : boolean;
            function GetValues() : ^LinkedListOfString;
            virtual procedure Accept(visitor : ^ITypeDeclarationVisitor);
        var
            _values : LinkedListOfString;
    end;
    ITypeDeclarationVisitor = interface
        procedure Visit(enumDecl : ^EnumDeclaration);
        procedure Visit(classDecl : ^ClassDeclaration);
        procedure Visit(methodTypeDecl : ^MethodTypeDeclaration);
        procedure Visit(interfaceDecl : ^InterfaceDeclaration);
    end;
    ITypeReferenceVisitor = interface
        procedure Visit(namedTypeRef : ^NamedTypeReference);
        procedure Visit(arrayTypeRef : ^ArrayTypeReference);
        procedure Visit(pointerTypeRef : ^PointerTypeReference);
    end;
    TypeReference = class(ParseNode)
        public
            virtual destructor();
            abstract procedure Accept(visitor : ^ITypeReferenceVisitor);
        protected
            constructor(start : ^SharedOfToken);
    end;
    NamedTypeReference = class(TypeReference)
        public
            constructor(start : ^SharedOfToken; typeName : ^String);
            virtual destructor();
            virtual procedure Accept(visitor : ^ITypeReferenceVisitor);
            function GetTypeName() : ^String;
        var
            _typeName : String;
    end;
    ArrayTypeReference = class(TypeReference)
        public 
            constructor(
                start : ^SharedOfToken; 
                elementCount : ^Expression;
                elementType : ^TypeReference);
            virtual destructor();
            virtual procedure Accept(visitor : ^ITypeReferenceVisitor);
            function GetElementCount() : ^Expression;
            function GetElementType() : ^TypeReference;
        var
            _elementCount : ^Expression;
            _elementType : ^TypeReference; 
    end;
    PointerTypeReference = class(TypeReference)
        public
            constructor(
                start : ^SharedOfToken;
                elementType : ^TypeReference);
            virtual destructor();
            virtual procedure Accept(visitor : ^ITypeReferenceVisitor);
            function GetElementType() : ^TypeReference;
        var
            _elementType : ^TypeReference;
    end;
    VariableDeclaration = class(ParseNode)
        public
            constructor(
                start : ^SharedOfToken);
            virtual destructor();
            procedure SetVariableType(value : ^TypeReference);
            procedure SetInitExpression(value : ^Expression);
            function AddVariableName(item : ^String) : boolean;
            function GetVariableType() : ^TypeReference;
            function GetInitExpression() : ^Expression;
            function GetVariableNames() : ^LinkedListOfString;
        var
            _variableNames : LinkedListOfString;
            _variableType : ^TypeReference;
            _initExpression : ^Expression;
    end;
    LinkedListNodeOfVariableDeclaration = class
        public
            constructor(value : ^VariableDeclaration);
            destructor();
            function GetValue() : ^VariableDeclaration;
            function GetNext() : ^LinkedListNodeOfVariableDeclaration;
            procedure SetNext(next : ^LinkedListNodeOfVariableDeclaration);
        var
            _value : ^VariableDeclaration;
            _next : ^LinkedListNodeOfVariableDeclaration;
    end;
    LinkedListEnumeratorOfVariableDeclaration = class
        public
            constructor(head : ^LinkedListNodeOfVariableDeclaration);
            function MoveNext() : boolean;
            function GetCurrent() : ^VariableDeclaration;
        var
            _head, _current : ^LinkedListNodeOfVariableDeclaration;
            _started : boolean;
    end;
    LinkedListOfVariableDeclaration = class
        public
            constructor();
            destructor();
            function Add(item : ^VariableDeclaration) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfVariableDeclaration;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfVariableDeclaration;
    end;
    VarBlock = class(ParseNode)
        public
            constructor(start : ^SharedOfToken);
            virtual destructor();
            function GetVariables() : ^LinkedListOfVariableDeclaration;
            function Add(item : ^VariableDeclaration) : boolean;
        var
            _variables : LinkedListOfVariableDeclaration;
    end;
    ParameterDeclaration = class(ParseNode)
        public
            constructor(
                start : ^SharedOfToken);
            virtual destructor();
            function GetParameterType() : ^TypeReference;
            function GetParameterNames() : ^LinkedListOfString;
            function AddName(item : ^String) : boolean;
            procedure SetParameterType(value : ^TypeReference);
        var
            _parameterType : ^TypeReference;
            _parameterNames : LinkedListOfString;
    end;
    LinkedListNodeOfParameterDeclaration = class
        public
            constructor(value : ^ParameterDeclaration);
            destructor();
            function GetValue() : ^ParameterDeclaration;
            function GetNext() : ^LinkedListNodeOfParameterDeclaration;
            procedure SetNext(next : ^LinkedListNodeOfParameterDeclaration);
        var
            _value : ^ParameterDeclaration;
            _next : ^LinkedListNodeOfParameterDeclaration;
    end;
    LinkedListEnumeratorOfParameterDeclaration = class
        public
            constructor(head : ^LinkedListNodeOfParameterDeclaration);
            function GetCurrent() : ^ParameterDeclaration;
            function MoveNext() : boolean;
        var
            _head, _current : ^LinkedListNodeOfParameterDeclaration;
            _started : boolean;
    end;
    LinkedListOfParameterDeclaration = class
        public
            constructor();
            destructor();
            function Add(item : ^ParameterDeclaration) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfParameterDeclaration;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfParameterDeclaration;
    end;
    MethodDeclaration = class(ParseNode)
        public
            constructor(
                start : ^SharedOfToken; 
                name : ^String;
                isStatic, isVirtual, isAbstract : boolean);
            virtual destructor();
            function GetReturnType() : ^TypeReference;
            function GetMethodName() : ^String;
            procedure SetReturnType(value : ^TypeReference);
            function GetParameters() : ^LinkedListOfParameterDeclaration;
            function AddParameter(item : ^ParameterDeclaration) : boolean;
            function GetIsStatic() : boolean;
            function GetIsVirtual() : boolean;  
            function GetIsAbstract() : boolean;
        var
            _methodName : String;
            _parameters : LinkedListOfParameterDeclaration;
            _returnType : ^TypeReference;
            _isStatic, _isVirtual, _isAbstract : boolean;
    end;
    LinkedListNodeOfMethodDeclaration = class
        public
            constructor(value : ^MethodDeclaration);
            destructor();
            function GetValue() : ^MethodDeclaration;
            function GetNext() : ^LinkedListNodeOfMethodDeclaration;
            procedure SetNext(next : ^LinkedListNodeOfMethodDeclaration);
        var
            _value : ^MethodDeclaration;
            _next : ^LinkedListNodeOfMethodDeclaration;
    end;
    LinkedListEnumeratorOfMethodDeclaration = class
        public
            constructor(head : ^LinkedListNodeOfMethodDeclaration);
            function MoveNext() : boolean;
            function GetCurrent() : ^MethodDeclaration;
        var
            _head, _current : ^LinkedListNodeOfMethodDeclaration;
            _started : boolean;
    end;
    LinkedListOfMethodDeclaration = class
        public
            constructor();
            destructor();
            function Add(item : ^MethodDeclaration) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfMethodDeclaration;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfMethodDeclaration;
    end;
    MethodDefinition = class(ParseNode)
        public
            constructor(
                start : ^SharedOfToken;
                name : ^String);
            virtual destructor();
            function GetMethodNameReference() : ^String;
            function GetExternImpl() : ^String;
            procedure SetExternImpl(value : ^String);
            function GetParameters() : ^LinkedListOfParameterDeclaration;
            procedure SetReturnType(value : ^TypeReference);
            function GetReturnType() : ^TypeReference;
            procedure SetLocalVariables(value : ^VarBlock);
            function GetLocalVariables() : ^VarBlock;
            procedure SetBody(value : ^BlockStatement);
            function GetBody() : ^BlockStatement;
        var
            _externImpl : String;
            _methodNameReference : String;
            _returnType : ^TypeReference;
            _localVariables : ^VarBlock;
            _body : ^BlockStatement;
            _parameters : LinkedListOfParameterDeclaration;
            _baseConstructorArguments : LinkedListOfExpression;
    end;
    LinkedListNodeOfTypeDeclaration = class
        public
            constructor(value : ^TypeDeclaration);
            destructor();
            function GetValue() : ^TypeDeclaration;
            function GetNext() : ^LinkedListNodeOfTypeDeclaration;
            procedure SetNext(next : ^LinkedListNodeOfTypeDeclaration);
        var
            _value : ^TypeDeclaration;
            _next : ^LinkedListNodeOfTypeDeclaration;
    end;
    LinkedListEnumeratorOfTypeDeclaration = class
        public
            constructor(head : ^LinkedListNodeOfTypeDeclaration);
            function MoveNext() : boolean;
            function GetCurrent() : ^TypeDeclaration;
        var
            _head, _current : ^LinkedListNodeOfTypeDeclaration;
            _started : boolean;
    end;
    LinkedListOfTypeDeclaration = class
        public
            constructor();
            destructor();
            function Add(item : ^TypeDeclaration) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfTypeDeclaration;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfTypeDeclaration;
    end;
    LinkedListNodeOfMethodDefinition = class
        public
            constructor(value : ^MethodDefinition);
            destructor();
            function GetValue() : ^MethodDefinition;
            function GetNext() : ^LinkedListNodeOfMethodDefinition;
            procedure SetNext(next : ^LinkedListNodeOfMethodDefinition);
        var
            _value : ^MethodDefinition;
            _next : ^LinkedListNodeOfMethodDefinition;
    end;
    LinkedListEnumeratorOfMethodDefinition = class
        public
            constructor(head : ^LinkedListNodeOfMethodDefinition);
            function GetCurrent() : ^MethodDefinition;
            function MoveNext() : boolean;
        var
            _head, _current : ^LinkedListNodeOfMethodDefinition;
            _started : boolean;
    end;
    LinkedListOfMethodDefinition = class
        public
            constructor();
            destructor();
            function Add(item : ^MethodDefinition) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfMethodDefinition;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfMethodDefinition;
    end;

    InterfaceDeclaration = class(TypeDeclaration)
        public
            constructor(start : ^SharedOfToken; name : ^String);
            virtual destructor();
            function GetBaseInterfaceType() : ^String;
            procedure SetBaseInterfaceType(value : ^String);
            function GetMethods() : ^LinkedListOfMethodDeclaration;
            function AddMethod(item : ^MethodDeclaration) : boolean;
            virtual procedure Accept(visitor : ^ITypeDeclarationVisitor);
        var
            _baseInterfaceType : String;
            _methods : LinkedListOfMethodDeclaration;
    end;

    MethodTypeDeclaration = class(TypeDeclaration)
        public
            constructor(start : ^SharedOfToken; name : ^String);
            virtual destructor();
            function GetReturnType() : ^TypeReference;
            procedure SetReturnType(value : ^TypeReference);
            function GetImplicitArgType() : ^TypeReference;
            procedure SetImplicitArgType(value : ^TypeReference);
            function GetParameters() : ^LinkedListOfParameterDeclaration;
            function AddParameter(item : ^ParameterDeclaration) : boolean;
            virtual procedure Accept(visitor : ^ITypeDeclarationVisitor);
        var
            _returnType : ^TypeReference;
            _implicitArgType : ^TypeReference;
            _parameters : LinkedListOfParameterDeclaration;
    end;

    ClassDeclaration = class(TypeDeclaration)
        public
            constructor(
                start : ^SharedOfToken; 
                name : ^String;
                baseType : ^String;
                isStatic : boolean);
            virtual destructor();
            function AddInterface(item : ^String) : boolean;
            function AddPublicMethod(item : ^MethodDeclaration) : boolean;
            function AddProtectedMethod(item : ^MethodDeclaration) : boolean;
            function AddPrivateMethod(item : ^MethodDeclaration) : boolean;
            function GetFields() : ^VarBlock;
            procedure SetFields(value : ^VarBlock);
            function GetIsStatic() : boolean;
            function GetIsAbstract() : boolean;
            function GetBaseType() : ^String;
            function GetPublicMethods() : ^LinkedListOfMethodDeclaration;
            function GetProtectedMethods() : ^LinkedListOfMethodDeclaration;
            function GetPrivateMethods() : ^LinkedListOfMethodDeclaration;
            virtual procedure Accept(visitor : ^ITypeDeclarationVisitor);
        var
            _isStatic, _isAbstract : boolean;
            _baseType : String;
            _fields : ^VarBlock;
            _publicMethods : LinkedListOfMethodDeclaration;
            _protectedMethods : LinkedListOfMethodDeclaration;
            _privateMethods : LinkedListOfMethodDeclaration;
            _interfaces : LinkedListOfString;
    end;

    ProgramUnit = class(ParseNode)
        public
            constructor(start : ^SharedOfToken);
            destructor();
            procedure SetNamespace(value : ^String);
            function GetNamespace() : ^String;
            function AddUses(item : ^String) : boolean;
            function GetUses() : ^LinkedListOfString;
            procedure SetGlobalVars(varBlock : ^VarBlock);
            function GetGlobalVars() : ^VarBlock;
            function AddType(item : ^TypeDeclaration) : boolean;
            function GetTypes() : ^LinkedListOfTypeDeclaration;
            function AddMethod(item : ^MethodDefinition) : boolean;
            function GetMethods() : ^LinkedListOfMethodDefinition;
        var
            _typeList : LinkedListOfTypeDeclaration;
            _methods : LinkedListOfMethodDefinition;
            _namespace : String;
            _usesReferences : LinkedListOfString;
            _globalVars : ^VarBlock;
    end;
    ParameterInfo = class
        public
            constructor(name : ^String; parameterType : ^TypeDefinition);
            destructor();
            function GetName() : ^String;
            function GetType() : ^TypeDefinition;
        var
            _name : String;
            _type : ^TypeDefinition;
    end;
    LinkedListNodeOfParameterInfo = class
        public
            constructor(value : ^ParameterInfo);
            destructor();
            function GetValue() : ^ParameterInfo;
            function GetNext() : ^LinkedListNodeOfParameterInfo;
            procedure SetNext(next : ^LinkedListNodeOfParameterInfo);
        var
            _value : ^ParameterInfo;
            _next : ^LinkedListNodeOfParameterInfo;
    end;
    LinkedListEnumeratorOfParameterInfo = class
        public
            constructor(head : ^LinkedListNodeOfParameterInfo);
            function GetCurrent() : ^ParameterInfo;
            function MoveNext() : boolean;
        var
            _head, _current : ^LinkedListNodeOfParameterInfo;
            _started : boolean;
    end;
    LinkedListOfParameterInfo = class
        public
            constructor();
            destructor();
            function Add(item : ^ParameterInfo) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfParameterInfo;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfParameterInfo;
    end;
    LinkedListNodeOfFieldInfo = class
        public
            constructor(value : ^FieldInfo);
            destructor();
            function GetValue() : ^FieldInfo;
            function GetNext() : ^LinkedListNodeOfFieldInfo;
            procedure SetNext(next : ^LinkedListNodeOfFieldInfo);
        var
            _value : ^FieldInfo;
            _next : ^LinkedListNodeOfFieldInfo;
    end;
    LinkedListEnumeratorOfFieldInfo = class
        public
            constructor(head : ^LinkedListNodeOfFieldInfo);
        var
            _head, _current : ^LinkedListNodeOfFieldInfo;
            _started : boolean;
    end;
    LinkedListOfFieldInfo = class
        public
            constructor();
            destructor();
            function Add(item : ^FieldInfo) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfFieldInfo;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfFieldInfo;
    end;
    FieldInfo = class
        public
            constructor();
            destructor();
        var
            _name : String;
            _type : ^TypeDefinition;
            _offset : integer;
            _isStatic, _isPublic, _isProtected : boolean;
    end;
    MethodInfo = class
        public
            constructor(owner : ^TypeDefinition);
            destructor();
            function GetName() : ^String;
            procedure SetName(value : ^String);
            function GetParameters() : ^LinkedListOfParameterInfo;
            function AddParameter(item : ^ParameterInfo) : boolean;
            function GetReturnType() : ^TypeDefinition;
            procedure SetReturnType(value : ^TypeDefinition);
            function GetIsStatic() : boolean;
            procedure SetIsStatic(value : boolean);
            function GetIsVirtual() : boolean;
            procedure SetIsVirtual(value : boolean);
            function GetIsAbstract() : boolean;
            procedure SetIsAbstract(value : boolean);
            function GetIsPublic() : boolean;
            procedure SetIsPublic(value : boolean);
            function GetIsProtected() : boolean;
            procedure SetIsProtected(value : boolean);
            function GetMangledName(value : ^String) : boolean;
            function GetOwnerType() : ^TypeDefinition;
        var
            _parameters : LinkedListOfParameterInfo;
            _name : String;
            _type : ^TypeDefinition;
            _returnType : ^TypeDefinition;
            _vTableIndex : integer;
            _isStatic, _isVirtual, _isAbstract, _isPublic, _isProtected : boolean;
    end;
    LinkedListNodeOfMethodInfo = class
        public
            constructor(value : ^MethodInfo);
            destructor();
            function GetValue() : ^MethodInfo;
            function GetNext() : ^LinkedListNodeOfMethodInfo;
            procedure SetNext(next : ^LinkedListNodeOfMethodInfo);
        var
            _value : ^MethodInfo;
            _next : ^LinkedListNodeOfMethodInfo;
    end;
    LinkedListEnumeratorOfMethodInfo = class
        public
            constructor(head : ^LinkedListNodeOfMethodInfo);
            function GetCurrent() : ^MethodInfo;
            function MoveNext() : boolean;
        var
            _head, _current : ^LinkedListNodeOfMethodInfo;
            _started : boolean;
    end;
    LinkedListOfMethodInfo = class
        public
            constructor();
            destructor();
            function Add(item : ^MethodInfo) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfMethodInfo;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfMethodInfo;
    end;
    TypeDefinition = class
        public
            constructor();
            destructor();
            function GetFullName() : ^String;
            procedure SetFullName(value : ^String);
            function GetSize() : integer;
            procedure SetSize(value : integer);
            function GetIsFloatingPoint() : boolean;
            procedure SetIsFloatingPoint(value : boolean);
            function GetIsPointer() : boolean;
            procedure SetIsPointer(value : boolean);
            function GetIsPublic() : boolean;
            procedure SetIsPublic(value : boolean);
            function GetIsArray() : boolean;
            procedure SetIsArray(value : boolean);
            function GetIsClass() : boolean;
            procedure SetIsClass(value : boolean);
            function GetIsMethod() : boolean;
            procedure SetIsMethod(value : boolean);
            function GetIsStaticClass() : boolean;
            procedure SetIsStaticClass(value : boolean);
            function GetIsAbstractClass() : boolean;
            procedure SetIsAbstractClass(value : boolean);
            function GetIsInterface() : boolean;
            procedure SetIsInterface(value : boolean);
            function GetIsEnum() : boolean;
            procedure SetIsEnum(value : boolean);
            function GetSpecialMangledName() : ^String;
            procedure SetSpecialMangledName(value : ^String);
            function GetEnumValues() : ^DictionaryOfStringToInteger;
            procedure SetBaseType(value : ^TypeDefinition);
            function GetBaseType() : ^TypeDefinition;
            procedure SetInnerType(value : ^TypeDefinition);
            function GetInnerType() : ^TypeDefinition;
            function GetArrayElementCount() : integer;
            procedure SetArrayElementCount(value : integer);
            function GetMethods() : ^LinkedListOfMethodInfo;
            function AddMethod(item : ^MethodInfo) : boolean;
            function GetMangledName(value : ^String) : boolean;
            function GetMangledQualifiedName(value : ^String) : boolean;
        var
            _enumValues : DictionaryOfStringToInteger;
            _fullName : String;
            _size : integer;
            _arrayElementCount : integer;
            _innerType : ^TypeDefinition;
            _baseClass : ^TypeDefinition;
            _methodReturnType : ^TypeDefinition;
            _methodImplicitArgType : ^TypeDefinition;
            _specialMangledName : String;
            _methods : LinkedListOfMethodInfo;
            _fields : LinkedListOfFieldInfo;
            _isPointer, _isArray, _isClass, _isFloatingPoint : boolean;
            _isPublic, _isStaticClass, _isAbstractClass, _isInterface : boolean;
            _isEnum, _isMethod : boolean;
    end;
    DictionaryOfStringToTypeDefinitionNode = class
        public
            constructor(key : ^String; value : ^TypeDefinition);
            destructor();
            function Key() : ^String;
            function Value() : ^TypeDefinition;
            procedure SetValue(value : ^TypeDefinition);
            function Next() : ^DictionaryOfStringToTypeDefinitionNode;
            procedure SetNext(value : ^DictionaryOfStringToTypeDefinitionNode);
        var
            _key : String;
            _value : ^TypeDefinition;
            _next : ^DictionaryOfStringToTypeDefinitionNode;
    end;
    DictionaryOfStringToTypeDefinition = class
        public
            constructor();
            destructor();
            function TryGetValue(key : ^String; valueRef : ^^TypeDefinition) : boolean;
            function TryAssign(key : ^String; value : ^TypeDefinition) : boolean;
        private 
            static function GetHashCode(value : ^String) : integer;
        var
            _table : array [256] of ^DictionaryOfStringToTypeDefinitionNode;
    end;
    LinkedListNodeOfTypeDefinition = class
        public
            constructor(value : ^TypeDefinition);
            destructor();
            function GetValue() : ^TypeDefinition;
            function GetNext() : ^LinkedListNodeOfTypeDefinition;
            procedure SetNext(next : ^LinkedListNodeOfTypeDefinition);
        var
            _value : ^TypeDefinition;
            _next : ^LinkedListNodeOfTypeDefinition;
    end;
    LinkedListEnumeratorOfTypeDefinition = class
        public
            constructor(head : ^LinkedListNodeOfTypeDefinition);
            function GetCurrent() : ^TypeDefinition;
            function MoveNext() : boolean;
        var
            _head, _current : ^LinkedListNodeOfTypeDefinition;
            _started : boolean;
    end;
    LinkedListOfTypeDefinition = class
        public
            constructor();
            destructor();
            function Add(item : ^TypeDefinition) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfTypeDefinition;
            procedure Clear();
            function GetCount() : integer;
        var
            _head, _tail : ^LinkedListNodeOfTypeDefinition;
            _count : integer;
    end;
    Scope = class
        public
            constructor();
            destructor();

            function DefineParameter(
                paramName : ^String;
                paramType : ^TypeDefinition) : boolean;
            function DefineLocalVariable(
                varName : ^String;
                varType : ^TypeDefinition) : boolean;
            function GetParameterNames() : ^LinkedListOfString;
            function GetParameterNameByIndex(index : integer) : ^String;
            function GetLocalVariableNames() : ^LinkedListOfString;
            function GetLocalVariableNameByIndex(index : integer) : ^String;
            function GetSymbolTypeByIndex(index : integer) : ^TypeDefinition;
            function TryGetSymbolIndexByName(
                name : ^String; 
                index : ^integer) : boolean; 
        var
            _symbols : DictionaryOfStringToInteger;
            _parameters : LinkedListOfTypeDefinition;
            _paramNames : LinkedListOfString;
            _localVars : LinkedListOfTypeDefinition;
            _localVarNames : LinkedListOfString;
    end;
    CompilerContext = class
        public
            constructor();
            destructor();
            function Initialize() : boolean;
            procedure SetNamespace(value : ^String);
            function AddUses(value : ^String) : boolean;
            function TryDeclareType(
                typeName : ^String; 
                typeRef : ^^TypeDefinition) : boolean;
            function TryFindTypeByName(
                typeName : ^String;
                typeRef : ^^TypeDefinition) : boolean;
            function TryFindMethodAndType(
                methodNameRef : ^String;
                parameterTypes : ^LinkedListOfTypeDefinition;
                typeRef : ^^TypeDefinition;
                methodRef : ^^MethodInfo) : boolean;
            function TryGetPointerType(
                elementType : ^TypeDefinition;
                typeRef : ^^TypeDefinition) : boolean;
            function TryGetArrayType(
                elementType : ^TypeDefinition;
                elementCount : integer;
                typeRef : ^^TypeDefinition) : boolean;
            function BeginScope(
                methodInfo : ^MethodInfo;
                scope : ^Scope) : boolean;
        private
            function InitializeIntType() : boolean;
            function InitializeShortType() : boolean;
            function InitializeLongType() : boolean;
            function InitializeCharType() : boolean; 
            function InitializeBoolType() : boolean; 
            function InitializeByteType() : boolean; 
            function InitializeSingleType() : boolean; 
            function InitializeDoubleType() : boolean; 
            function InitializeExtendedType() : boolean; 
            function InitializeGenericPointerType() : boolean;
            static function GetFullName(
                typeName, ns : ^String;
                fullName : ^String) : boolean;
            static function MatchParameters(
                parameterTypes : ^LinkedListOfTypeDefinition;
                parameters : ^LinkedListOfParameterInfo) : boolean;  
        var
            _namespace : String;
            _usesList : LinkedListOfString;
            _includeList : LinkedListOfString;
            _types : DictionaryOfStringToTypeDefinition;
    end;
    Parser = class
        public
            constructor(log : ^MessageLog);
            function TryParse(reader : ^TokenReader) : ^ProgramUnit;
        private
            function ExpectEndOfFile(reader : ^TokenReader) : boolean;
            function TryParseNamespaceDeclaration(
                reader : ^TokenReader;
                programUnit : ^ProgramUnit) : boolean;
            function TryParseUsesDeclaration(
                reader : ^TokenReader;
                programUnit : ^ProgramUnit) : boolean;
            function TryParseTypeBlock(
                reader : ^TokenReader;
                programUnit : ^ProgramUnit) : boolean;
            function TryParseGlobalVarBlock(
                reader : ^TokenReader;
                programUnit : ^ProgramUnit) : boolean; 
            function TryParseMethodDefinition(
                reader : ^TokenReader;
                programUnit : ^ProgramUnit) : boolean;
            function TryParseConstructorDefinition(
                reader : ^TokenReader;
                methodRef : ^^MethodDefinition) : boolean;
            function TryParseDestructorDefinition(
                reader : ^TokenReader;
                methodRef : ^^MethodDefinition) : boolean;
            function TryParseFullNameDeclaration(
                reader : ^TokenReader;
                fullName : ^String) : boolean;
            function TryParseVarBlock(
                reader : ^TokenReader;
                allowInitializers : boolean;
                varBlock : ^VarBlock) : boolean;
            function TryParseVariableDeclaration(
                reader : ^TokenReader;
                allowInitializers : boolean;
                varDeclRef : ^^VariableDeclaration) : boolean;
            function TryParseEnumDeclaration(
                reader : ^TokenReader;
                name : ^SharedOfToken;
                typeDeclRef : ^^TypeDeclaration) : boolean;
            function TryParseClassDeclaration(
                reader : ^TokenReader;
                name : ^SharedOfToken;
                typeDeclRef : ^^TypeDeclaration) : boolean;
            function TryParseInterfaceDeclaration(
                reader : ^TokenReader;
                name : ^SharedOfToken;
                typeDeclRef : ^^TypeDeclaration) : boolean;
            function TryParseMethodTypeDeclaration(
                reader : ^TokenReader;
                name : ^SharedOfToken;
                typeDeclRef : ^^TypeDeclaration) : boolean;
            function TryParseMethodDeclaration(
                reader : ^TokenReader;
                methodDeclRef : ^^MethodDeclaration) : boolean;
            function TryParseTypeReference(
                reader : ^TokenReader;
                typeRefRef : ^^TypeReference) : boolean;
            function TryParseParameterDeclaration(
                reader : ^TokenReader;
                parameterDeclRef : ^^ParameterDeclaration) : boolean;
            function TryParseParameterList(
                reader : ^TokenReader;
                parameterList : ^LinkedListOfParameterDeclaration) : boolean;
            function TryParseConstructorDeclaration(
                reader : ^TokenReader;
                methodDeclRef : ^^MethodDeclaration) : boolean;
            function TryParseDestructorDeclaration(
                reader : ^TokenReader;
                isVirtual : boolean;
                methodDeclRef : ^^MethodDeclaration) : boolean;
            function TryParseExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean;
            function TryParseSimpleExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean;
            function TryParseTermExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean;
            function TryParseFactorExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseNotExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseNegativeExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseParentheticalExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseNewExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseAddressExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseLiteralNilExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseLiteralTrueExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseLiteralFalseExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseReferenceExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean; 
            function TryParseLiteralExpression(
                reader : ^TokenReader;
                exprRef : ^^Expression) : boolean;
            function TryParseStatement(
                reader : ^TokenReader;
                statementRef : ^^Statement) : boolean;
            function TryParseBlockStatement(
                reader : ^TokenReader;
                statementRef : ^^BlockStatement) : boolean; 
            function Expect(
                reader : ^TokenReader;
                keyword : Keyword) : boolean;
            function ExpectIdentifier(
                reader : ^TokenReader;
                value : ^String) : boolean;
            function ExpectStringLiteral(
                reader : ^TokenReader;
                value : ^String) : boolean;
        var
            _log : ^MessageLog;
    end;
    LinkedListNodeOfMethodImpl = class
        public
            constructor(value : ^MethodImpl);
            destructor();
            function GetValue() : ^MethodImpl;
            function GetNext() : ^LinkedListNodeOfMethodImpl;
            procedure SetNext(next : ^LinkedListNodeOfMethodImpl);
        var
            _value : ^MethodImpl;
            _next : ^LinkedListNodeOfMethodImpl;
    end;
    LinkedListEnumeratorOfMethodImpl = class
        public
            constructor(head : ^LinkedListNodeOfMethodImpl);
            function MoveNext() : boolean;
            function GetCurrent() : ^MethodImpl;
        var
            _head, _current : ^LinkedListNodeOfMethodImpl;
            _started : boolean;
    end;
    LinkedListOfMethodImpl = class
        public
            constructor();
            destructor();
            function Add(item : ^MethodImpl) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfMethodImpl;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfMethodImpl;
    end;
    LinkedListNodeOfOpStatement = class
        public
            constructor(value : ^OpStatement);
            destructor();
            function GetValue() : ^OpStatement;
            function GetNext() : ^LinkedListNodeOfOpStatement;
            procedure SetNext(next : ^LinkedListNodeOfOpStatement);
        var
            _value : ^OpStatement;
            _next : ^LinkedListNodeOfOpStatement;
    end;
    LinkedListEnumeratorOfOpStatement = class
        public
            constructor(head : ^LinkedListNodeOfOpStatement);
            function MoveNext() : boolean;
            function GetCurrent() : ^OpStatement;
        var
            _head, _current : ^LinkedListNodeOfOpStatement;
            _started : boolean;
    end;
    LinkedListOfOpStatement = class
        public
            constructor();
            destructor();
            function Add(item : ^OpStatement) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfOpStatement;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfOpStatement;
    end;
    LinkedListNodeOfDataEntry = class
        public
            constructor(value : ^DataEntry);
            destructor();
            function GetValue() : ^DataEntry;
            function GetNext() : ^LinkedListNodeOfDataEntry;
            procedure SetNext(next : ^LinkedListNodeOfDataEntry);
        var
            _value : ^DataEntry;
            _next : ^LinkedListNodeOfDataEntry;
    end;
    LinkedListEnumeratorOfDataEntry = class
        public
            constructor(head : ^LinkedListNodeOfDataEntry);
            function MoveNext() : boolean;
            function GetCurrent() : ^DataEntry;
        var
            _head, _current : ^LinkedListNodeOfDataEntry;
            _started : boolean;
    end;
    LinkedListOfDataEntry = class
        public
            constructor();
            destructor();
            function Add(item : ^DataEntry) : boolean;
            function GetEnumerator() : LinkedListEnumeratorOfDataEntry;
            procedure Clear();
        var
            _head, _tail : ^LinkedListNodeOfDataEntry;
    end;
    Module = class
        public
            constructor();
            destructor();
            function AddMethodImpl(item : ^MethodImpl) : boolean;
            function GetMethods() : ^LinkedListOfMethodImpl;
            function GetData() : ^LinkedListOfDataEntry;
            function TryDefineStringLiteral(
                value : ^String;
                symbol : ^String) : boolean;
        var
            _literalStringIndex : integer;
            _dataSeg : LinkedListOfDataEntry;
            _codeSeg : LinkedListOfMethodImpl;
    end;
    MethodImpl = class
        public 
            constructor(module : ^Module; method : ^MethodInfo);
            destructor();
            function GetMethodInfo() : ^MethodInfo;
            function GetScope() : ^Scope;
            function GetModule() : ^Module;
            function GetStatements() : ^LinkedListOfOpStatement;
        var
            _module : ^Module;
            _method : ^MethodInfo;
            _scope : Scope;
            _statements : LinkedListOfOpStatement;
    end;
    OpCode = (
        Nop,
        Call,
        Add,
        Sub,
        Mul,
        Div,
        Neg,
        Not,
        Jump,
        LoadArg,
        StoreArg,
        LoadArgRef,
        LoadLocal,
        StoreLocal,
        LoadLocalRef,
        LoadField,
        StoreField,
        LoadFieldRef,
        Push,
        Pop,
        LoadInt,
        LoadStatic,
        LoadStaticRef
    );
    DataCode = (DB, DW, DD, DP);
    DataEntry = class
        public
            constructor();
            destructor();
            function GetCode() : DataCode;
            function GetLabel() : ^String;
            function GetValue() : integer;
            function GetSymbol() : ^String;
            procedure SetLabel(value : ^String);
            procedure AssignDB(value : byte);
            procedure AssignDW(value : short);
            procedure AssignDD(value : integer);
            procedure AssignDP(value : ^String);
        var
            _label : String;
            _code : DataCode;
            _symbol : String;
            _value : integer;
    end;
    OpStatement = class
        public
            constructor();
            destructor();

            function GetLabel() : ^String;
            function GetOpCode() : OpCode;
            function GetSize() : integer;
            function GetArgOrLocalIndex() : integer;
            function GetTargetSymbol() : ^String;
            function GetIntValue() : integer;
            procedure SetLabel(value : ^String);
            procedure AssignLoadInt(value : integer; size : integer);
            procedure AssignStoreLocal(index : integer; size : integer);
            procedure AssignStoreArg(index : integer; size : integer);
            procedure AssignNeg(size : integer);
            procedure AssignLoadStaticRef(targetSymbol : ^String);
        var
            _label : String;
            _opCode : OpCode;
            _size : integer;
            _argOrLocalIndex : integer;
            _targetSymbol : String;
            _intValue : integer;
    end;
    CodeGenerator = class
        public
            constructor(log : ^MessageLog);
            function TryCreateTypes(
                context : ^CompilerContext;
                programUnit : ^ProgramUnit) : boolean;
            function TryCreateMethod(
                context : ^CompilerContext;
                typeDef : ^TypeDefinition;
                method : ^MethodDeclaration;
                methodInfoRef : ^^MethodInfo) : boolean;
            function CreateModule(
                context : ^CompilerContext;
                programUnit : ^ProgramUnit) : ^Module;
        private
            function TryImplementMethod(
                context : ^CompilerContext;
                module : ^Module;
                methodDef : ^MethodDefinition) : boolean;
            function TryResolveTypeReference(
                context : ^CompilerContext;
                typeRef : ^TypeReference;
                typeDefRef : ^^TypeDefinition) : boolean;
            function DefineLocalVariables(
                context : ^CompilerContext;
                methodImpl : ^MethodImpl; 
                methodDef : ^MethodDefinition) : boolean;
        var
            _log : ^MessageLog;
    end;
    X86AsmModuleWriter = class
        public
            constructor();
            destructor();
            function Open(path : ^String; log : ^MessageLog) : boolean;
            procedure Write(module : ^Module);
        private
            procedure WriteDataSeg(module : ^Module);
            procedure WriteCodeSeg(module : ^Module);
            procedure WriteMethodImpl(
                module : ^Module; 
                methodImpl : ^MethodImpl);
            procedure WriteStatement(
                module : ^Module;
                methodImpl : ^MethodImpl;
                statement : ^OpStatement);
            procedure WriteLoadIntStatement(
                module : ^Module;
                methodImpl : ^MethodImpl;
                statement : ^OpStatement);
            procedure WriteStoreLocalStatement(
                module : ^Module;
                methodImpl : ^MethodImpl;
                statement : ^OpStatement);
            procedure WriteNegStatement(
                module : ^Module;
                methodImpl : ^MethodImpl;
                statement : ^OpStatement);
            procedure WriteLoadStaticRefStatement(
                module : ^Module;
                methodImpl : ^MethodImpl;
                statement : ^OpStatement);                
        var
            _log : ^MessageLog;
            _inner : ^TextWriter; 
    end;
