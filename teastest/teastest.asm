; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\code\TEA\teastest\teastest.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG4562	DB	'Hello World!', 00H
CONST	ENDS
PUBLIC	??1A@@UAE@XZ					; A::~A
PUBLIC	?F1@A@@UAEHXZ					; A::F1
PUBLIC	?F2@A@@UAEHXZ					; A::F2
PUBLIC	?F3@A@@UAEHXZ					; A::F3
PUBLIC	??0A@@QAE@XZ					; A::A
PUBLIC	??_GA@@UAEPAXI@Z				; A::`scalar deleting destructor'
PUBLIC	?derp@@YAHFHF_N@Z				; derp
PUBLIC	_main
PUBLIC	??_7A@@6B@					; A::`vftable'
PUBLIC	??_R4A@@6B@					; A::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVA@@@8					; A `RTTI Type Descriptor'
PUBLIC	??_R3A@@8					; A::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2A@@8					; A::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@A@@8				; A::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_puts:PROC
EXTRN	??_EA@@UAEPAXI@Z:PROC				; A::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@A@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@A@@8 DD FLAT:??_R0?AVA@@@8		; A::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3A@@8
rdata$r	ENDS
;	COMDAT ??_R2A@@8
rdata$r	SEGMENT
??_R2A@@8 DD	FLAT:??_R1A@?0A@EA@A@@8			; A::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3A@@8
rdata$r	SEGMENT
??_R3A@@8 DD	00H					; A::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2A@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVA@@@8
_DATA	SEGMENT
??_R0?AVA@@@8 DD FLAT:??_7type_info@@6B@		; A `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVA@@', 00H
_DATA	ENDS
;	COMDAT ??_R4A@@6B@
rdata$r	SEGMENT
??_R4A@@6B@ DD	00H					; A::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVA@@@8
	DD	FLAT:??_R3A@@8
rdata$r	ENDS
;	COMDAT ??_7A@@6B@
CONST	SEGMENT
??_7A@@6B@ DD	FLAT:??_R4A@@6B@			; A::`vftable'
	DD	FLAT:??_EA@@UAEPAXI@Z
	DD	FLAT:?F1@A@@UAEHXZ
	DD	FLAT:?F2@A@@UAEHXZ
	DD	FLAT:?F3@A@@UAEHXZ
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = -20						; size = 4
_pA$ = -16						; size = 4
tv69 = -12						; size = 4
$T1 = -8						; size = 4
_fResult$ = -1						; size = 1
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC
; File c:\code\tea\teastest\teastest.cpp
; Line 22
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 23
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@main
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0A@@QAE@XZ
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@main
$LN3@main:
	mov	DWORD PTR tv69[ebp], 0
$LN4@main:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _pA$[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _pA$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pA$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
; Line 25
	push	0
	push	2
	push	1
	push	0
	call	?derp@@YAHFHF_N@Z			; derp
	add	esp, 16					; 00000010H
; Line 26
	push	OFFSET $SG4562
	call	_puts
	add	esp, 4
; Line 27
	cmp	DWORD PTR _argc$[ebp], 0
	jle	SHORT $LN5@main
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN6@main
$LN5@main:
	mov	DWORD PTR tv79[ebp], 0
$LN6@main:
	mov	cl, BYTE PTR tv79[ebp]
	mov	BYTE PTR _fResult$[ebp], cl
; Line 28
	xor	eax, eax
; Line 29
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_length$ = -4						; size = 4
_a$ = 8							; size = 2
_b$ = 12						; size = 4
_c$ = 16						; size = 2
_d$ = 20						; size = 1
?derp@@YAHFHF_N@Z PROC					; derp
; File c:\code\tea\teastest\teastest.cpp
; Line 16
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 17
	mov	DWORD PTR _length$[ebp], 0
; Line 18
	mov	eax, DWORD PTR _length$[ebp]
; Line 19
	mov	esp, ebp
	pop	ebp
	ret	0
?derp@@YAHFHF_N@Z ENDP					; derp
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GA@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GA@@UAEPAXI@Z PROC					; A::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1A@@UAE@XZ				; A::~A
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GA@@UAEPAXI@Z ENDP					; A::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0A@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0A@@QAE@XZ PROC					; A::A, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7A@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0A@@QAE@XZ ENDP					; A::A
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?F3@A@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?F3@A@@UAEHXZ PROC					; A::F3, COMDAT
; _this$ = ecx
; File c:\code\tea\teastest\teastest.cpp
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?F3@A@@UAEHXZ ENDP					; A::F3
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?F2@A@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?F2@A@@UAEHXZ PROC					; A::F2, COMDAT
; _this$ = ecx
; File c:\code\tea\teastest\teastest.cpp
; Line 11
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?F2@A@@UAEHXZ ENDP					; A::F2
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?F1@A@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?F1@A@@UAEHXZ PROC					; A::F1, COMDAT
; _this$ = ecx
; File c:\code\tea\teastest\teastest.cpp
; Line 10
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?F1@A@@UAEHXZ ENDP					; A::F1
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1A@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1A@@UAE@XZ PROC					; A::~A, COMDAT
; _this$ = ecx
; File c:\code\tea\teastest\teastest.cpp
; Line 9
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7A@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1A@@UAE@XZ ENDP					; A::~A
_TEXT	ENDS
END
