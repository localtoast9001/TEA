<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CodeGenerator_ArrayIndexIntExpected" xml:space="preserve">
    <value>The index expression must evaluate to an ordinal type.</value>
  </data>
  <data name="CodeGenerator_ArrayTypeExpected" xml:space="preserve">
    <value>The expression that is being indexed must evaluate to an array type.</value>
  </data>
  <data name="CodeGenerator_ArrayTypeIntElementExpected" xml:space="preserve">
    <value>The element range for an array type must be a constant integer expression.</value>
  </data>
  <data name="CodeGenerator_BaseInterfaceIsNotInterface" xml:space="preserve">
    <value>Interface types can only be derived from other interface types. [{0}] is not an interface type.</value>
  </data>
  <data name="CodeGenerator_BaseTypeNotClass" xml:space="preserve">
    <value>The type {0} cannot be used as a base type because it is not a class.</value>
  </data>
  <data name="CodeGenerator_BooleanConditionExpected" xml:space="preserve">
    <value>The condition provided does not evaluate to a boolean value. Alter the expression to evaluate to a boolean value.</value>
  </data>
  <data name="CodeGenerator_CannotDerefNonPointer" xml:space="preserve">
    <value>The expression that is being dereferenced must evaluate to a pointer type.</value>
  </data>
  <data name="CodeGenerator_CannotFindConstructor" xml:space="preserve">
    <value>Cannot locate an appropriate constructor for {0} with the arguments given.</value>
  </data>
  <data name="CodeGenerator_ClassDoesNotDeclareInterfaceMethod" xml:space="preserve">
    <value>The class {0} does not fully implement interface {1}. It is missing a virtual or abstract declaration of method {2}.</value>
  </data>
  <data name="CodeGenerator_ConstructorArgumentsAreOnlySupportedOnClassTypes" xml:space="preserve">
    <value>Constructor arguments are only supported on class types.</value>
  </data>
  <data name="CodeGenerator_DeleteOperandArrayNotSupported" xml:space="preserve">
    <value>Deleting Arrays is not implemented.</value>
  </data>
  <data name="CodeGenerator_DeleteOperandMustBePointerOrArray" xml:space="preserve">
    <value>The type of operand used for delete must be a pointer or array operand.</value>
  </data>
  <data name="CodeGenerator_NegativeNotSupported" xml:space="preserve">
    <value>The negative operator (-) is not supported on type {0}.</value>
  </data>
  <data name="CodeGenerator_NoAutomaticConversion" xml:space="preserve">
    <value>No automatic conversion exists between {0} and {1} types.</value>
  </data>
  <data name="CodeGenerator_NoBaseTypeForInherited" xml:space="preserve">
    <value>Cannot reference inherited members of type {0} because it has no base class.</value>
  </data>
  <data name="CodeGenerator_NotNotSupported" xml:space="preserve">
    <value>The not operator (not) is not supported on type {0}.</value>
  </data>
  <data name="CodeGenerator_SystemMemoryMissingAlloc" xml:space="preserve">
    <value>The System.Memory class does not define a method Alloc.</value>
  </data>
  <data name="CodeGenerator_SystemMemoryMissingFree" xml:space="preserve">
    <value>The System.Memory class does not define a method Free.</value>
  </data>
  <data name="CodeGenerator_SystemMemoryNotDeclared" xml:space="preserve">
    <value>New and Delete require System to be used for the class System.Memory</value>
  </data>
  <data name="CodeGenerator_TypeAlreadyDeclared" xml:space="preserve">
    <value>Type {0} was already declared.</value>
  </data>
  <data name="CodeGenerator_UndeclaredIdentifier" xml:space="preserve">
    <value>Undeclared identifier {0}.</value>
  </data>
  <data name="CodeGenerator_UndeclaredMember" xml:space="preserve">
    <value>{0} is not a member of {1}.</value>
  </data>
  <data name="CodeGenerator_UndeclaredMethod" xml:space="preserve">
    <value>Procedure or function {0} must be declared before it can be defined.</value>
  </data>
  <data name="CodeGenerator_UndefinedType" xml:space="preserve">
    <value>Type {0} was not defined.</value>
  </data>
  <data name="CodeGenerator_UnexpectedArgumentCount" xml:space="preserve">
    <value>The number of arguments passed to method {0} should be {1}, not {2}.</value>
  </data>
  <data name="Parser_EndOfFile" xml:space="preserve">
    <value>end of file.</value>
  </data>
  <data name="Parser_EndOfFileExpected" xml:space="preserve">
    <value>Expected end of file.</value>
  </data>
  <data name="Parser_IdentifierExpected" xml:space="preserve">
    <value>Identifier was expected, not {0}.</value>
  </data>
  <data name="Parser_KeywordExpected" xml:space="preserve">
    <value>Keyword {0} was expected, not {1}.</value>
  </data>
  <data name="Parser_Unexpected" xml:space="preserve">
    <value>{0} was not expected.</value>
  </data>
  <data name="TokenReader_CommentNotTerminated" xml:space="preserve">
    <value>The comment is not terminated.</value>
  </data>
  <data name="TokenReader_NoDigitAfterHash" xml:space="preserve">
    <value>A numberic value is expected immediately after the #.</value>
  </data>
  <data name="TokenReader_StringNotTerminated" xml:space="preserve">
    <value>The string literal is not terminated.</value>
  </data>
  <data name="TokenReader_UnsupportedChar" xml:space="preserve">
    <value>An unsupported char [{0}] was detected in the stream.</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>TEAC.exe - TEA Language Compiler
Copyright (C) 2013-2022 Jon Rowlett. All rights reserved.
Usage:
teac.exe [options] &lt;input file.tea&gt;
Options:
  /Fa&lt;file.asm&gt; - write an assembly listing &lt;file.asm&gt; on output.
  /Fo&lt;file.o&gt; - write an ELF object file &lt;file.o&gt; on output.
&lt;input file.tea&gt; - TEA source file to compile.</value>
  </data>
</root>