namespace RayTracer;

type
    Vector3D = public class
        public
            constructor();
            constructor(x, y, z : double);
            function GetX() : double;
            function GetY() : double;
            function GetZ() : double;
            function GetLengthSq() : double;
            function GetLength() : double;

            static function DotP(a, b : ^Vector3D) : double;
            static function negative(value : ^Vector3D) : Vector3D;
            static function add(a, b : ^Vector3D) : Vector3D;
            static function sub(a, b : ^Vector3D) : Vector3D;
        var
            _x, _y, _z : double;
    end;
    Ray3D = public class
        public
            constructor();
            constructor(origin, direction : ^Vector3D);

            function GetOrigin() : Vector3D;
            function GetDirection() : Vector3D;
        var
            _origin, _direction : Vector3D;
    end;
    Matrix4x4 = public class
        var
            _mat : array[16] of double;
    end;
    Color = public class
        public 
            constructor();
            constructor(r, g, b : double);
            constructor(r, g, b, a : double);

            function GetRed() : double;
            function GetGreen() : double;
            function GetBlue() : double;
            function GetAlpha() : double;
        var
            _b, _g, _r, _a : double;
    end;
    Texture = public {abstract} class
        public
            abstract function GetColor(
                textureCoord : ^Vector3D) : Color;
    end; 
    Shape = public {abstract} class
        public
            virtual destructor();
            abstract function Intersect(
                ray : ^Ray3D;
                point, normal : ^Vector3D) : boolean; 
            function GetTexture() : ^Texture;
            procedure SetTexture(texture : ^Texture);
        protected 
            constructor();
        var
            _texture : ^Texture;
    end;
    Light = public {abstract} class
    end;
    Camera = public class
        var
            _location : Vector3D;
            _focalPoint : Vector3D;
            _nearPlane : double;
            _xResolution, _yResolution : integer;
    end;
    Scene = public class
        var
            _camera : ^Camera;
    end;
