namespace System;

type
    Console = public static class
        public
            static function WriteLine(text : array of character) : integer;
            static function Write(text : array of character) : integer;
            static function Write(ch : character) : integer;
    end;
    Convert = public static class
        public
            static function Lo(value : long) : integer;
            static function Hi(value : long) : integer;
            static function Lo(value : integer) : short;
            static function Hi(value : integer) : short;
            static function Lo(value : short) : byte;
            static function Hi(value : short) : byte;
            static function ToCharacter(value : integer) : character;
            static function ToCharacter(value : short) : character;
            static function ToInteger(value : character) : integer;
            static function ToInteger(value : short) : integer;
            static function ToShort(value : byte) : short;
            static function ToShort(value : character) : short;
            static function ToLong(value : integer) : long;
            static function ToFloat(value : integer) : single;
            static function ToDouble(value : integer) : double;
            static function ToExtended(value : integer) : extended;
    end;
    Math = public static class
        public
            static function Sqrt(value : double) : double;
            static function Sin(value : double) : double;
            static function Cos(value : double) : double;
            static function Tan(value : double) : double;
            static function Abs(value : double) : double;
            static function Log10(value : double) : double;
            static function Log2(value : double) : double;
            static function Ln(value : double) : double;
            static function Sqr(value : double) : double;
            static function Exp(value, power : double) : double;
            static function Round(value : double) : integer;
            static function Floor(value : double) : integer;
            static function Ceiling(value : double) : integer;
            static function Pi() : double;
            static function Max(x, y : integer) : integer;
            static function Min(x, y : integer) : integer;
    end;
    Memory = public static class
        public
            static function Alloc(size : integer) : ^byte;
            static procedure Free(p : ^byte);
    end;
    StringBuffer = class
        public
            constructor();
            static function Create(source : array of character) : ^StringBuffer;
            static function GetEmpty() : ^StringBuffer;
            procedure AddRef();
            procedure Release();
            destructor(); 
            function GetBuffer() : array of character;
        var
            _refCount : integer;
            _buffer : array of character;
    end;
    String = public class
        public
            constructor();
            constructor(source : ^String);
            destructor();

            static function CompareOrdinal(
                a, b : ^String) : integer;
            static function CompareOrdinal(
                a : ^String;
                b : array of character) : integer;
            static function CompareOrdinal(
                a : array of character;
                b : ^String) : integer;
            static function CompareOrdinal(
                a, b : array of character) : integer;

            procedure assign(source : ^String);
            function Length() : integer;
            function Characters() : array of character;
            function TryAssign(
                source : array of character) : boolean;
            function TryAppend(
                source : ^String) : boolean;
        var
            _bufferRef : ^StringBuffer;
    end;
    LinkedListNode = class
        var
            _next : ^LinkedListNode;
            _data : integer;
    end;
    LinkedList = public class
        public 
            constructor();
            destructor();
            procedure AddHead(data : integer);
            procedure Add(data : integer);
        var
            _head : ^LinkedListNode;
            _tail : ^LinkedListNode;
    end;
    TimeSpan = public class
        public
            constructor();
            constructor(hours, minutes, seconds : integer);
            constructor(days, hours, minutes, seconds : integer);
            constructor(days, hours, minutes, seconds, milliseconds : integer);
            constructor(ticks : long);
            function GetDays() : integer;
            function GetHours() : integer;
            function GetMinutes() : integer;
            function GetSeconds() : integer;
            function GetMilliseconds() : integer;
            function GetTotalDays() : double;
            function GetTotalHours() : double;
            function GetTotalMinutes() : double;
            function GetTotalSeconds() : double;    
            function GetTotalMilliseconds() : double;
        var
            _ticks : long;
    end;
    DateTime = public class
        var
            _ticks : long;
    end;
