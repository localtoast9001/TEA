(******************************************************************************
 Copyright (C) 2013-2023 Jon Rowlett. All rights reserved.
 System.String.tea - Implementation of the System.String class.
******************************************************************************)
namespace System;
uses System;

constructor StringBuffer();
begin
    _buffer := nil;
    _refCount := 0;
end;

function StringBuffer.Create(source : array of character) : ^StringBuffer;
var
    bufferLen : integer = 0;
begin
    if source <> nil then
    begin
        while source[bufferLen] <> 0 do
        begin
            bufferLen := bufferLen + 1;
        end;
    end;
    Create := StringBuffer.Create(source, 0, bufferLen);
end;

function StringBuffer.Create(
    source : array of character;
    startIndex, length : integer) : ^StringBuffer;
var
    index : integer = 0;
    bufferLen : integer = 0;  
    charBuffer : array of character = nil;
begin
    Create := nil;
    if source <> nil then
    begin
        bufferLen := length + 1;
        charBuffer := Memory.Alloc(bufferLen * 2);
        if charBuffer <> nil then
        begin
            Create := new StringBuffer();
            if Create <> nil then
            begin
                Create^.AddRef();
                Create^._buffer := charBuffer;
                while index < length do
                begin
                    charBuffer[index] := source[startIndex + index];
                    index := index + 1;
                end;
                charBuffer[index] := Convert.ToCharacter(0);
            end
            else
            begin
                Memory.Free(charBuffer);
            end;
        end;
    end
    else
    begin
        Create := nil;
    end;
end;

procedure StringBuffer.AddRef();
begin
    _refCount := _refCount + 1;
end;

procedure StringBuffer.Release();
var
    refCount : integer;
begin
    refCount := _refCount - 1;
    if refCount <= 0 then
    begin
        delete this;
    end
    else
    begin
        _refCount := refCount;
    end;
end;

destructor StringBuffer(); 
begin
    if _buffer <> nil then
    begin
        Memory.Free(_buffer);
        _buffer := nil;
    end;
end;

function StringBuffer.GetBuffer() : array of character;
begin
    GetBuffer := _buffer;
end;

constructor String();
begin
    _bufferRef := nil;
end;

constructor String(source : ^String);
begin
    _bufferRef := nil;
    if source <> nil then
    begin
        _bufferRef := source^._bufferRef;
        if _bufferRef <> nil then
        begin
            _bufferRef^.AddRef();
        end;
    end;
end;

destructor String();
begin
    if _bufferRef <> nil then
    begin
        _bufferRef^.Release();
        _bufferRef := nil;
    end;
end;

function String.CompareOrdinal(
    a, b : ^String) : integer;
begin
    CompareOrdinal := String.CompareOrdinal(
        a^.Characters(),
        b^.Characters());
end;

function String.CompareOrdinal(
    a : ^String;
    b : array of character) : integer;
begin
    CompareOrdinal := String.CompareOrdinal(
        a^.Characters(),
        b);
end;

function String.CompareOrdinal(
    a : array of character;
    b : ^String) : integer;
begin
    CompareOrdinal := String.CompareOrdinal(
        a,
        b^.Characters());
end;

function String.CompareOrdinal(
    a, b : array of character) : integer;
var
    i : integer = 0;
    c, as, bs : integer;
    done : boolean = false;
begin
    while not done do
    begin
        as := Convert.ToInteger(Convert.ToShort(a[i]));
        bs := Convert.ToInteger(Convert.ToShort(b[i]));
        c := bs - as;
        i := i + 1;
        done := (c <> 0) or (as = 0) or (bs = 0); 
    end;
    if c < 0 then
        CompareOrdinal := -1
    else if c > 0 then
        CompareOrdinal := 1
    else 
        CompareOrdinal := 0;
end;

procedure String.assign(source : ^String);
begin
    if source <> nil then
    begin
        if _bufferRef <> nil then
        begin
            _bufferRef^.Release();
        end;
        _bufferRef := source^._bufferRef;
        if _bufferRef <> nil then
        begin
            _bufferRef^.AddRef();
        end;
    end;
end;

function String.TryAssign(source : array of character) : boolean;
var 
    newBuffer : ^StringBuffer;
begin
    newBuffer := StringBuffer.Create(source);
    if newBuffer <> nil then
    begin
        if _bufferRef <> nil then
        begin
            _bufferRef^.Release();
        end;
        _bufferRef := newBuffer;
        TryAssign := true;
    end
    else
    begin
        TryAssign := false;
    end;
end;

function String.Length() : integer;
var
    charBuffer : array of character;
begin
    Length := 0;
    if _bufferRef <> nil then
    begin
        charBuffer := _bufferRef^.GetBuffer();
        while charBuffer[Length] <> 0 do
            Length := Length + 1;
    end;
end;

function String.Characters() : array of character;
begin
    Characters := '';
    if _bufferRef <> nil then
        Characters := _bufferRef^.GetBuffer();
end;

function String.LastIndexOf(
    ch : character) : integer;
var
    index : integer = 0;
    chars : array of character = Characters();
begin
    LastIndexOf := -1;
    while chars[index] <> 0 do
    begin
        if chars[index] = ch then
            LastIndexOf := index;
        index := index + 1;
    end;
end;

function String.Substring(
    startIndex : integer;
    value : ^String) : boolean;
begin
    Substring := this^.Substring(
        startIndex,
        Length() - startIndex,
        value);
end;

function String.Substring(
    startIndex, length : integer;
    value : ^String) : boolean;
var
    actualStartIndex : integer = startIndex;
    actualLength : integer = length;
    chars : array of character = Characters();
    newBuffer : ^StringBuffer = 0;
begin
    if startIndex < 0 then
        actualStartIndex := 0;
    if actualLength > Length() - actualStartIndex then
        actualLength := Length() - actualStartIndex;
    newBuffer := StringBuffer.Create(
        chars, 
        actualStartIndex, 
        actualLength);
    if newBuffer <> nil then
    begin
        if value^._bufferRef <> nil then
            value^._bufferRef^.Release();
        value^._bufferRef := newBuffer;
    end;

    Substring := newBuffer <> nil;
end;
