namespace System.IO;
uses System, System.IO, System.Text;

destructor TextWriter();
begin
end;

procedure TextWriter.Close();
begin
end;

function TextWriter.Flush() : boolean;
begin
    Flush := true;
end;

function TextWriter.Write(value : character) : boolean;
var
    valArray : array of character = @value;
begin
    Write := this^.Write(valArray, 0, 1);
end;

function TextWriter.Write(value : ^String) : boolean;
begin
    Write := this^.Write(value^.Characters(), 0, value^.Length());
end;

function TextWriter.Write(value : integer) : boolean;
var
    sb : SimpleStringBuilder;
begin
    Write := DefaultFormatter.TryFormat(value, nil, @sb);
    if Write then
        Write := this^.Write(sb.GetBuffer(), 0, sb.Length());
end;

function TextWriter.Write(value : array of character) : boolean;
var
    len : integer = 0;
begin
    while value[len] <> 0 do
        len := len + 1;
    Write := this^.Write(value, 0, len); 
end;

function TextWriter.WriteLine() : boolean;
begin
    WriteLine := this^.Write(#13#10);
end;

function TextWriter.WriteLine(value : character) : boolean;
begin
    if this^.Write(value) then
        WriteLine := this^.WriteLine()
    else
        WriteLine := false;
end;

function TextWriter.WriteLine(value : ^String) : boolean;
begin
    if this^.Write(value) then
        WriteLine := this^.WriteLine()
    else
        WriteLine := false;
end;

function TextWriter.WriteLine(value : array of character) : boolean;
begin
    if this^.Write(value) then
        WriteLine := this^.WriteLine()
    else
        WriteLine := false;
end;

function TextWriter.WriteLine(value : integer) : boolean;
var
    sb : SimpleStringBuilder;
begin
    WriteLine := DefaultFormatter.TryFormat(value, nil, @sb);
    if WriteLine then
        WriteLine := this^.WriteLine(sb.GetBuffer());
end;

