namespace System.IO;
uses System, System.Text;

type
    Stream = public {abstract} class
        public
            virtual destructor();
            abstract procedure Close();
            abstract function Read(
                buffer : array of byte;
                offset, count : integer) : integer;
            abstract function Write(
                buffer : array of byte;
                offset, count : integer) : boolean;
            virtual function Flush() : boolean; 
            abstract function GetLength() : long;
            abstract function Resize(
                length : long) : boolean;
            abstract function SeekBegin(
                offset : integer) : boolean;  
            abstract function SeekCurrent(
                offset : integer) : boolean;  
            abstract function SeekEnd(
                offset : integer) : boolean;
            abstract function CanWrite() : boolean;
            abstract function CanRead() : boolean;
            abstract function CanSeek() : boolean;
            abstract function CanResize() : boolean;               
        protected
            constructor();
    end;
    
    FileStream = public class(Stream)
        public
            constructor();
            virtual destructor();
            function Open(
                path : array of character;
                read, write : boolean) : boolean;
            function LastError() : integer; 
            virtual procedure Close();
            virtual function Read(
                buffer : array of byte;
                offset, count : integer) : integer;
            virtual function Write(
                buffer : array of byte;
                offset, count : integer) : boolean;
            virtual function Flush() : boolean; 
            virtual function GetLength() : long;
            virtual function Resize(
                length : long) : boolean;
            virtual function SeekBegin(
                offset : integer) : boolean;  
            virtual function SeekCurrent(
                offset : integer) : boolean;  
            virtual function SeekEnd(
                offset : integer) : boolean;
            virtual function CanWrite() : boolean;
            virtual function CanRead() : boolean;
            virtual function CanSeek() : boolean;
            virtual function CanResize() : boolean;
        private
            static function _wopen(
                filename : array of character;
                oflag, pmode : integer) : integer;
            static function _read( 
                fd : integer;
                buffer : array of byte; 
                count : integer) : integer;
            static function _write( 
                fd : integer;
                buffer : array of byte; 
                count : integer) : integer;
            static function _commit(
                fd : integer) : integer;
            static function _tell(
                fd : integer) : long;
            static function _lseek(
                fd : integer;
                offset : long;
                origin : integer) : long;
            static function _close(
                fd : integer) : integer;   
            static function _get_errno(
                pValue : ^integer) : integer;             
        var
            _fd : integer;
            _canRead, _canWrite : boolean;
    end;

    MemoryStream = public class(Stream)
        public
            constructor();
            constructor(capacity : integer);
            constructor(
                buffer : array of byte; 
                index, count : integer);
            constructor(
                buffer : array of byte;
                index, count : integer;
                write : boolean);
            virtual destructor();
            virtual procedure Close();
            virtual function Read(
                buffer : array of byte;
                offset, count : integer) : integer;
            virtual function Write(
                buffer : array of byte;
                offset, count : integer) : boolean;
            virtual function GetLength() : long;
            virtual function Resize(
                length : long) : boolean;
            virtual function SeekBegin(
                offset : integer) : boolean;  
            virtual function SeekCurrent(
                offset : integer) : boolean;  
            virtual function SeekEnd(
                offset : integer) : boolean;
            virtual function CanWrite() : boolean;
            virtual function CanRead() : boolean;
            virtual function CanSeek() : boolean;
            virtual function CanResize() : boolean;               
        var
            _buffer : array of byte;
            _index, _count, _capacity, _currentIndex : integer;
            _ownsBuffer : boolean;
            _canWrite : boolean;
    end;

    TextReader = public {abstract} class
        public
            virtual destructor();
            virtual procedure Close();
            abstract function Peek() : integer;
            abstract function Read() : integer;
            abstract function Read(
                buffer : array of character;
                index, count : integer) : integer;
            virtual function ReadLine(
                line : ^String) : boolean;
            virtual function ReadToEnd(
                value : ^String) : boolean;
        protected
            constructor();
    end;

    TextWriter = public {abstract} class
        public
            virtual destructor();
            virtual procedure Close();
            virtual function Flush() : boolean;
            virtual function Write(value : character) : boolean;
            virtual function Write(value : ^String) : boolean;
            virtual function Write(value : array of character) : boolean;
            virtual function Write(value : integer) : boolean;
            virtual function WriteLine() : boolean;
            virtual function WriteLine(value : character) : boolean;
            virtual function WriteLine(value : ^String) : boolean;
            virtual function WriteLine(value : array of character) : boolean;
            virtual function WriteLine(value : integer) : boolean;
            abstract function Write(
                buffer : array of character;
                index, count : integer) : boolean;
    end;

    StreamReader = public class(TextReader)
        public
            constructor();
            constructor(
                stream : ^Stream; 
                ownStream : boolean;
                encoding : ^Encoding;
                ownEncoding : boolean);
            function Open(path : array of character) : boolean;
            virtual destructor();
            virtual procedure Close();
            virtual function Peek() : integer;
            virtual function Read() : integer;
            virtual function Read(
                buffer : array of character;
                index, count : integer) : integer;
        var
            _stream : ^Stream;
            _ownStream : boolean;
            _encoding : ^Encoding;
            _ownEncoding : boolean;
            _peekChar : integer;
    end;

    StreamWriter = public class(TextWriter)
        public
            constructor();
            constructor(
                stream : ^Stream; 
                ownStream : boolean;
                encoding : ^Encoding;
                ownEncoding : boolean);
            virtual destructor();
            virtual procedure Close();
            virtual function Flush() : boolean;
            virtual function Write(
                buffer : array of character;
                index, count : integer) : boolean;
            function Open(path : array of character) : boolean;
        var
            _stream : ^Stream;
            _ownStream : boolean;
            _encoding : ^Encoding;
            _ownEncoding : boolean;
    end;
